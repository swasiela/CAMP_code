/* --- Generated by genom 2.99.40. Do not edit -------------------------- */
/*
 * Copyright (c) 2015-2023 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution and use  in source  and binary  forms,  with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 *					Anthony Mallet on Tue Aug 11 2015
 */


#ifndef H_NHFC_CLIENT
#define H_NHFC_CLIENT

#include <stdbool.h>

#include "genom3/c/client.h"


/* --- Interface types ----------------------------------------------------- */





#ifndef _genom_state_stats_c_type
# define _genom_state_stats_c_type
typedef struct genom_state_stats genom_state_stats;
#endif /* _genom_state_stats_c_type */

#ifndef _genom_state_stats_definition_c_type
# define _genom_state_stats_definition_c_type
struct genom_state_stats {
 float last;
 float max;
 float avg;
};
#endif /* _genom_state_stats_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_rusage_c_type
# define _genom_state_rusage_c_type
typedef struct genom_state_rusage genom_state_rusage;
#endif /* _genom_state_rusage_c_type */

#ifndef _genom_state_rusage_definition_c_type
# define _genom_state_rusage_definition_c_type
struct genom_state_rusage {
 uint32_t cycles;
 genom_state_stats timings;
 genom_state_stats load;
};
#endif /* _genom_state_rusage_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_activity_c_type
# define _genom_state_activity_c_type
typedef struct genom_state_activity genom_state_activity;
#endif /* _genom_state_activity_c_type */

#ifndef _genom_state_activity_definition_c_type
# define _genom_state_activity_definition_c_type
struct genom_state_activity {
 uint32_t id;
 char name[64];
};
#endif /* _genom_state_activity_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_task_c_type
# define _genom_state_task_c_type
typedef struct genom_state_task genom_state_task;
#endif /* _genom_state_task_c_type */

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#ifndef _genom_state_task_definition_c_type
# define _genom_state_task_definition_c_type
struct genom_state_task {
 char name[64];
 genom_state_rusage rusage;
 sequence_genom_state_activity activity;
};
#endif /* _genom_state_task_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */




#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_component_c_type
# define _genom_state_component_c_type
typedef struct genom_state_component genom_state_component;
#endif /* _genom_state_component_c_type */

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */

#ifndef _genom_state_component_definition_c_type
# define _genom_state_component_definition_c_type
struct genom_state_component {
 sequence_genom_state_task task;
 char digest[33];
 char date[31];
 char version[32];
};
#endif /* _genom_state_component_definition_c_type */


#include <stdint.h>

#ifndef _or_time_ts_c_type
# define _or_time_ts_c_type
typedef struct or_time_ts or_time_ts;
#endif /* _or_time_ts_c_type */

#ifndef _or_time_ts_definition_c_type
# define _or_time_ts_definition_c_type
struct or_time_ts {
 int32_t sec;
 int32_t nsec;
};
#endif /* _or_time_ts_definition_c_type */

#include <stdint.h>

#ifndef _or_rotorcraft_control_type_c_type
# define _or_rotorcraft_control_type_c_type
typedef uint32_t or_rotorcraft_control_type;
enum {
  or_rotorcraft_velocity =	0,
  or_rotorcraft_throttle =	1
};
#endif /* _or_rotorcraft_control_type_c_type */


#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence8_double_c_type
# define _sequence8_double_c_type
typedef struct sequence8_double {
  uint32_t _maximum, _length;
  double _buffer[8];
} sequence8_double;
#endif /* _sequence8_double_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence8_double_c_type
# define _sequence8_double_c_type
typedef struct sequence8_double {
  uint32_t _maximum, _length;
  double _buffer[8];
} sequence8_double;
#endif /* _sequence8_double_c_type */

#ifndef _or_rotorcraft_rotor_control_c_type
# define _or_rotorcraft_rotor_control_c_type
typedef sequence8_double or_rotorcraft_rotor_control;
#endif /* _or_rotorcraft_rotor_control_c_type */


#ifndef _or_rotorcraft_input_c_type
# define _or_rotorcraft_input_c_type
typedef struct or_rotorcraft_input or_rotorcraft_input;
#endif /* _or_rotorcraft_input_c_type */

#ifndef _or_rotorcraft_input_definition_c_type
# define _or_rotorcraft_input_definition_c_type
struct or_rotorcraft_input {
 or_time_ts ts;
 or_rotorcraft_control_type control;
 or_rotorcraft_rotor_control desired;
};
#endif /* _or_rotorcraft_input_definition_c_type */


#include <stdbool.h>

#ifndef _or_rotorcraft_rotor_state_c_type
# define _or_rotorcraft_rotor_state_c_type
typedef struct or_rotorcraft_rotor_state or_rotorcraft_rotor_state;
#endif /* _or_rotorcraft_rotor_state_c_type */

#ifndef _or_rotorcraft_rotor_state_definition_c_type
# define _or_rotorcraft_rotor_state_definition_c_type
struct or_rotorcraft_rotor_state {
 or_time_ts ts;
 bool emerg;
 bool spinning;
 bool starting;
 bool disabled;
 double velocity;
 double throttle;
 double consumption;
 double energy_level;
};
#endif /* _or_rotorcraft_rotor_state_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence8_or_rotorcraft_rotor_state_c_type
# define _sequence8_or_rotorcraft_rotor_state_c_type
typedef struct sequence8_or_rotorcraft_rotor_state {
  uint32_t _maximum, _length;
  or_rotorcraft_rotor_state _buffer[8];
} sequence8_or_rotorcraft_rotor_state;
#endif /* _sequence8_or_rotorcraft_rotor_state_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _or_rotorcraft_output_c_type
# define _or_rotorcraft_output_c_type
typedef struct or_rotorcraft_output or_rotorcraft_output;
#endif /* _or_rotorcraft_output_c_type */

#ifndef _sequence8_or_rotorcraft_rotor_state_c_type
# define _sequence8_or_rotorcraft_rotor_state_c_type
typedef struct sequence8_or_rotorcraft_rotor_state {
  uint32_t _maximum, _length;
  or_rotorcraft_rotor_state _buffer[8];
} sequence8_or_rotorcraft_rotor_state;
#endif /* _sequence8_or_rotorcraft_rotor_state_c_type */

#ifndef _or_rotorcraft_output_definition_c_type
# define _or_rotorcraft_output_definition_c_type
struct or_rotorcraft_output {
 sequence8_or_rotorcraft_rotor_state rotor;
};
#endif /* _or_rotorcraft_output_definition_c_type */


#ifndef _or_t3d_pos_c_type
# define _or_t3d_pos_c_type
typedef struct or_t3d_pos or_t3d_pos;
#endif /* _or_t3d_pos_c_type */

#ifndef _or_t3d_pos_definition_c_type
# define _or_t3d_pos_definition_c_type
struct or_t3d_pos {
 double x;
 double y;
 double z;
};
#endif /* _or_t3d_pos_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */


#ifndef _or_t3d_att_c_type
# define _or_t3d_att_c_type
typedef struct or_t3d_att or_t3d_att;
#endif /* _or_t3d_att_c_type */

#ifndef _or_t3d_att_definition_c_type
# define _or_t3d_att_definition_c_type
struct or_t3d_att {
 double qw;
 double qx;
 double qy;
 double qz;
};
#endif /* _or_t3d_att_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */


#ifndef _or_t3d_vel_c_type
# define _or_t3d_vel_c_type
typedef struct or_t3d_vel or_t3d_vel;
#endif /* _or_t3d_vel_c_type */

#ifndef _or_t3d_vel_definition_c_type
# define _or_t3d_vel_definition_c_type
struct or_t3d_vel {
 double vx;
 double vy;
 double vz;
};
#endif /* _or_t3d_vel_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */


#ifndef _or_t3d_avel_c_type
# define _or_t3d_avel_c_type
typedef struct or_t3d_avel or_t3d_avel;
#endif /* _or_t3d_avel_c_type */

#ifndef _or_t3d_avel_definition_c_type
# define _or_t3d_avel_definition_c_type
struct or_t3d_avel {
 double wx;
 double wy;
 double wz;
};
#endif /* _or_t3d_avel_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */


#ifndef _or_t3d_acc_c_type
# define _or_t3d_acc_c_type
typedef struct or_t3d_acc or_t3d_acc;
#endif /* _or_t3d_acc_c_type */

#ifndef _or_t3d_acc_definition_c_type
# define _or_t3d_acc_definition_c_type
struct or_t3d_acc {
 double ax;
 double ay;
 double az;
};
#endif /* _or_t3d_acc_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */


#ifndef _or_t3d_aacc_c_type
# define _or_t3d_aacc_c_type
typedef struct or_t3d_aacc or_t3d_aacc;
#endif /* _or_t3d_aacc_c_type */

#ifndef _or_t3d_aacc_definition_c_type
# define _or_t3d_aacc_definition_c_type
struct or_t3d_aacc {
 double awx;
 double awy;
 double awz;
};
#endif /* _or_t3d_aacc_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */



#ifndef _or_t3d_pos_cov_c_type
# define _or_t3d_pos_cov_c_type
typedef struct or_t3d_pos_cov or_t3d_pos_cov;
#endif /* _or_t3d_pos_cov_c_type */

#ifndef _or_t3d_pos_cov_definition_c_type
# define _or_t3d_pos_cov_definition_c_type
struct or_t3d_pos_cov {
 double cov[6];
};
#endif /* _or_t3d_pos_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */



#ifndef _or_t3d_att_cov_c_type
# define _or_t3d_att_cov_c_type
typedef struct or_t3d_att_cov or_t3d_att_cov;
#endif /* _or_t3d_att_cov_c_type */

#ifndef _or_t3d_att_cov_definition_c_type
# define _or_t3d_att_cov_definition_c_type
struct or_t3d_att_cov {
 double cov[10];
};
#endif /* _or_t3d_att_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_cov_c_type
# define _optional_or_t3d_att_cov_c_type
typedef struct optional_or_t3d_att_cov {
  bool _present;
  or_t3d_att_cov _value;
} optional_or_t3d_att_cov;
#endif /* _optional_or_t3d_att_cov_c_type */



#ifndef _or_t3d_att_pos_cov_c_type
# define _or_t3d_att_pos_cov_c_type
typedef struct or_t3d_att_pos_cov or_t3d_att_pos_cov;
#endif /* _or_t3d_att_pos_cov_c_type */

#ifndef _or_t3d_att_pos_cov_definition_c_type
# define _or_t3d_att_pos_cov_definition_c_type
struct or_t3d_att_pos_cov {
 double cov[12];
};
#endif /* _or_t3d_att_pos_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_pos_cov_c_type
# define _optional_or_t3d_att_pos_cov_c_type
typedef struct optional_or_t3d_att_pos_cov {
  bool _present;
  or_t3d_att_pos_cov _value;
} optional_or_t3d_att_pos_cov;
#endif /* _optional_or_t3d_att_pos_cov_c_type */


#ifndef _or_t3d_vel_cov_c_type
# define _or_t3d_vel_cov_c_type
typedef struct or_t3d_vel_cov or_t3d_vel_cov;
#endif /* _or_t3d_vel_cov_c_type */

#ifndef _or_t3d_vel_cov_definition_c_type
# define _or_t3d_vel_cov_definition_c_type
struct or_t3d_vel_cov {
 double cov[6];
};
#endif /* _or_t3d_vel_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */


#ifndef _or_t3d_avel_cov_c_type
# define _or_t3d_avel_cov_c_type
typedef struct or_t3d_avel_cov or_t3d_avel_cov;
#endif /* _or_t3d_avel_cov_c_type */

#ifndef _or_t3d_avel_cov_definition_c_type
# define _or_t3d_avel_cov_definition_c_type
struct or_t3d_avel_cov {
 double cov[6];
};
#endif /* _or_t3d_avel_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_avel_cov_c_type
# define _optional_or_t3d_avel_cov_c_type
typedef struct optional_or_t3d_avel_cov {
  bool _present;
  or_t3d_avel_cov _value;
} optional_or_t3d_avel_cov;
#endif /* _optional_or_t3d_avel_cov_c_type */


#ifndef _or_t3d_acc_cov_c_type
# define _or_t3d_acc_cov_c_type
typedef struct or_t3d_acc_cov or_t3d_acc_cov;
#endif /* _or_t3d_acc_cov_c_type */

#ifndef _or_t3d_acc_cov_definition_c_type
# define _or_t3d_acc_cov_definition_c_type
struct or_t3d_acc_cov {
 double cov[6];
};
#endif /* _or_t3d_acc_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */


#ifndef _or_t3d_aacc_cov_c_type
# define _or_t3d_aacc_cov_c_type
typedef struct or_t3d_aacc_cov or_t3d_aacc_cov;
#endif /* _or_t3d_aacc_cov_c_type */

#ifndef _or_t3d_aacc_cov_definition_c_type
# define _or_t3d_aacc_cov_definition_c_type
struct or_t3d_aacc_cov {
 double cov[6];
};
#endif /* _or_t3d_aacc_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_aacc_cov_c_type
# define _optional_or_t3d_aacc_cov_c_type
typedef struct optional_or_t3d_aacc_cov {
  bool _present;
  or_t3d_aacc_cov _value;
} optional_or_t3d_aacc_cov;
#endif /* _optional_or_t3d_aacc_cov_c_type */

#include <stdbool.h>

#ifndef _or_pose_estimator_state_c_type
# define _or_pose_estimator_state_c_type
typedef struct or_pose_estimator_state or_pose_estimator_state;
#endif /* _or_pose_estimator_state_c_type */

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */

#ifndef _optional_or_t3d_att_cov_c_type
# define _optional_or_t3d_att_cov_c_type
typedef struct optional_or_t3d_att_cov {
  bool _present;
  or_t3d_att_cov _value;
} optional_or_t3d_att_cov;
#endif /* _optional_or_t3d_att_cov_c_type */

#ifndef _optional_or_t3d_att_pos_cov_c_type
# define _optional_or_t3d_att_pos_cov_c_type
typedef struct optional_or_t3d_att_pos_cov {
  bool _present;
  or_t3d_att_pos_cov _value;
} optional_or_t3d_att_pos_cov;
#endif /* _optional_or_t3d_att_pos_cov_c_type */

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */

#ifndef _optional_or_t3d_avel_cov_c_type
# define _optional_or_t3d_avel_cov_c_type
typedef struct optional_or_t3d_avel_cov {
  bool _present;
  or_t3d_avel_cov _value;
} optional_or_t3d_avel_cov;
#endif /* _optional_or_t3d_avel_cov_c_type */

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */

#ifndef _optional_or_t3d_aacc_cov_c_type
# define _optional_or_t3d_aacc_cov_c_type
typedef struct optional_or_t3d_aacc_cov {
  bool _present;
  or_t3d_aacc_cov _value;
} optional_or_t3d_aacc_cov;
#endif /* _optional_or_t3d_aacc_cov_c_type */

#ifndef _or_pose_estimator_state_definition_c_type
# define _or_pose_estimator_state_definition_c_type
struct or_pose_estimator_state {
 or_time_ts ts;
 bool intrinsic;
 optional_or_t3d_pos pos;
 optional_or_t3d_att att;
 optional_or_t3d_vel vel;
 optional_or_t3d_avel avel;
 optional_or_t3d_acc acc;
 optional_or_t3d_aacc aacc;
 optional_or_t3d_pos_cov pos_cov;
 optional_or_t3d_att_cov att_cov;
 optional_or_t3d_att_pos_cov att_pos_cov;
 optional_or_t3d_vel_cov vel_cov;
 optional_or_t3d_avel_cov avel_cov;
 optional_or_t3d_acc_cov acc_cov;
 optional_or_t3d_aacc_cov aacc_cov;
};
#endif /* _or_pose_estimator_state_definition_c_type */


#ifndef _or_t3d_jerk_c_type
# define _or_t3d_jerk_c_type
typedef struct or_t3d_jerk or_t3d_jerk;
#endif /* _or_t3d_jerk_c_type */

#ifndef _or_t3d_jerk_definition_c_type
# define _or_t3d_jerk_definition_c_type
struct or_t3d_jerk {
 double jx;
 double jy;
 double jz;
};
#endif /* _or_t3d_jerk_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_jerk_c_type
# define _optional_or_t3d_jerk_c_type
typedef struct optional_or_t3d_jerk {
  bool _present;
  or_t3d_jerk _value;
} optional_or_t3d_jerk;
#endif /* _optional_or_t3d_jerk_c_type */


#ifndef _or_t3d_snap_c_type
# define _or_t3d_snap_c_type
typedef struct or_t3d_snap or_t3d_snap;
#endif /* _or_t3d_snap_c_type */

#ifndef _or_t3d_snap_definition_c_type
# define _or_t3d_snap_definition_c_type
struct or_t3d_snap {
 double sx;
 double sy;
 double sz;
};
#endif /* _or_t3d_snap_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_snap_c_type
# define _optional_or_t3d_snap_c_type
typedef struct optional_or_t3d_snap {
  bool _present;
  or_t3d_snap _value;
} optional_or_t3d_snap;
#endif /* _optional_or_t3d_snap_c_type */

#include <stdbool.h>

#ifndef _or_rigid_body_state_c_type
# define _or_rigid_body_state_c_type
typedef struct or_rigid_body_state or_rigid_body_state;
#endif /* _or_rigid_body_state_c_type */

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */

#ifndef _optional_or_t3d_jerk_c_type
# define _optional_or_t3d_jerk_c_type
typedef struct optional_or_t3d_jerk {
  bool _present;
  or_t3d_jerk _value;
} optional_or_t3d_jerk;
#endif /* _optional_or_t3d_jerk_c_type */

#ifndef _optional_or_t3d_snap_c_type
# define _optional_or_t3d_snap_c_type
typedef struct optional_or_t3d_snap {
  bool _present;
  or_t3d_snap _value;
} optional_or_t3d_snap;
#endif /* _optional_or_t3d_snap_c_type */

#ifndef _or_rigid_body_state_definition_c_type
# define _or_rigid_body_state_definition_c_type
struct or_rigid_body_state {
 or_time_ts ts;
 bool intrinsic;
 optional_or_t3d_pos pos;
 optional_or_t3d_att att;
 optional_or_t3d_vel vel;
 optional_or_t3d_avel avel;
 optional_or_t3d_acc acc;
 optional_or_t3d_aacc aacc;
 optional_or_t3d_jerk jerk;
 optional_or_t3d_snap snap;
};
#endif /* _or_rigid_body_state_definition_c_type */


#ifndef _or_rb3d_force_c_type
# define _or_rb3d_force_c_type
typedef struct or_rb3d_force or_rb3d_force;
#endif /* _or_rb3d_force_c_type */

#ifndef _or_rb3d_force_definition_c_type
# define _or_rb3d_force_definition_c_type
struct or_rb3d_force {
 double x;
 double y;
 double z;
};
#endif /* _or_rb3d_force_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_rb3d_force_c_type
# define _optional_or_rb3d_force_c_type
typedef struct optional_or_rb3d_force {
  bool _present;
  or_rb3d_force _value;
} optional_or_rb3d_force;
#endif /* _optional_or_rb3d_force_c_type */


#ifndef _or_rb3d_force_cov_c_type
# define _or_rb3d_force_cov_c_type
typedef struct or_rb3d_force_cov or_rb3d_force_cov;
#endif /* _or_rb3d_force_cov_c_type */

#ifndef _or_rb3d_force_cov_definition_c_type
# define _or_rb3d_force_cov_definition_c_type
struct or_rb3d_force_cov {
 double cov[6];
};
#endif /* _or_rb3d_force_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_rb3d_force_cov_c_type
# define _optional_or_rb3d_force_cov_c_type
typedef struct optional_or_rb3d_force_cov {
  bool _present;
  or_rb3d_force_cov _value;
} optional_or_rb3d_force_cov;
#endif /* _optional_or_rb3d_force_cov_c_type */


#ifndef _or_rb3d_torque_c_type
# define _or_rb3d_torque_c_type
typedef struct or_rb3d_torque or_rb3d_torque;
#endif /* _or_rb3d_torque_c_type */

#ifndef _or_rb3d_torque_definition_c_type
# define _or_rb3d_torque_definition_c_type
struct or_rb3d_torque {
 double x;
 double y;
 double z;
};
#endif /* _or_rb3d_torque_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_rb3d_torque_c_type
# define _optional_or_rb3d_torque_c_type
typedef struct optional_or_rb3d_torque {
  bool _present;
  or_rb3d_torque _value;
} optional_or_rb3d_torque;
#endif /* _optional_or_rb3d_torque_c_type */


#ifndef _or_rb3d_torque_cov_c_type
# define _or_rb3d_torque_cov_c_type
typedef struct or_rb3d_torque_cov or_rb3d_torque_cov;
#endif /* _or_rb3d_torque_cov_c_type */

#ifndef _or_rb3d_torque_cov_definition_c_type
# define _or_rb3d_torque_cov_definition_c_type
struct or_rb3d_torque_cov {
 double cov[6];
};
#endif /* _or_rb3d_torque_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_rb3d_torque_cov_c_type
# define _optional_or_rb3d_torque_cov_c_type
typedef struct optional_or_rb3d_torque_cov {
  bool _present;
  or_rb3d_torque_cov _value;
} optional_or_rb3d_torque_cov;
#endif /* _optional_or_rb3d_torque_cov_c_type */

#include <stdbool.h>

#ifndef _or_wrench_estimator_state_c_type
# define _or_wrench_estimator_state_c_type
typedef struct or_wrench_estimator_state or_wrench_estimator_state;
#endif /* _or_wrench_estimator_state_c_type */

#ifndef _optional_or_rb3d_force_c_type
# define _optional_or_rb3d_force_c_type
typedef struct optional_or_rb3d_force {
  bool _present;
  or_rb3d_force _value;
} optional_or_rb3d_force;
#endif /* _optional_or_rb3d_force_c_type */

#ifndef _optional_or_rb3d_force_cov_c_type
# define _optional_or_rb3d_force_cov_c_type
typedef struct optional_or_rb3d_force_cov {
  bool _present;
  or_rb3d_force_cov _value;
} optional_or_rb3d_force_cov;
#endif /* _optional_or_rb3d_force_cov_c_type */

#ifndef _optional_or_rb3d_torque_c_type
# define _optional_or_rb3d_torque_c_type
typedef struct optional_or_rb3d_torque {
  bool _present;
  or_rb3d_torque _value;
} optional_or_rb3d_torque;
#endif /* _optional_or_rb3d_torque_c_type */

#ifndef _optional_or_rb3d_torque_cov_c_type
# define _optional_or_rb3d_torque_cov_c_type
typedef struct optional_or_rb3d_torque_cov {
  bool _present;
  or_rb3d_torque_cov _value;
} optional_or_rb3d_torque_cov;
#endif /* _optional_or_rb3d_torque_cov_c_type */

#ifndef _or_wrench_estimator_state_definition_c_type
# define _or_wrench_estimator_state_definition_c_type
struct or_wrench_estimator_state {
 or_time_ts ts;
 bool intrinsic;
 optional_or_rb3d_force force;
 optional_or_rb3d_force_cov force_cov;
 optional_or_rb3d_torque torque;
 optional_or_rb3d_torque_cov torque_cov;
};
#endif /* _or_wrench_estimator_state_definition_c_type */


#ifndef _genom_incompatible_digest_client_digest_c_type
# define _genom_incompatible_digest_client_digest_c_type
typedef struct genom_incompatible_digest_client_digest genom_incompatible_digest_client_digest;
#endif /* _genom_incompatible_digest_client_digest_c_type */

#ifndef _genom_incompatible_digest_client_digest_definition_c_type
# define _genom_incompatible_digest_client_digest_definition_c_type
struct genom_incompatible_digest_client_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_client_digest_definition_c_type */


#ifndef _genom_incompatible_digest_server_digest_c_type
# define _genom_incompatible_digest_server_digest_c_type
typedef struct genom_incompatible_digest_server_digest genom_incompatible_digest_server_digest;
#endif /* _genom_incompatible_digest_server_digest_c_type */

#ifndef _genom_incompatible_digest_server_digest_definition_c_type
# define _genom_incompatible_digest_server_digest_definition_c_type
struct genom_incompatible_digest_server_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_server_digest_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_incompatible_digest_c_type
# define _genom_incompatible_digest_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_incompatible_digest_id[] = "::genom::incompatible_digest";
typedef struct genom_incompatible_digest_detail genom_incompatible_digest_detail;
#endif /* _genom_incompatible_digest_c_type */

#ifndef _genom_incompatible_digest_definition_c_type
# define _genom_incompatible_digest_definition_c_type
struct genom_incompatible_digest_detail {
 genom_incompatible_digest_client_digest client;
 genom_incompatible_digest_server_digest server;
};
static inline genom_event
genom_incompatible_digest(genom_incompatible_digest_detail *d, genom_context self) {
 return self->raise(genom_incompatible_digest_id, d, sizeof(*d), self);
}
#endif /* _genom_incompatible_digest_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_bad_transition_c_type
# define _genom_bad_transition_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_bad_transition_id[] = "::genom::bad_transition";
typedef struct genom_bad_transition_detail genom_bad_transition_detail;
#endif /* _genom_bad_transition_c_type */

#ifndef _genom_bad_transition_definition_c_type
# define _genom_bad_transition_definition_c_type
struct genom_bad_transition_detail {
 char from[128];
 char to[128];
};
static inline genom_event
genom_bad_transition(genom_bad_transition_detail *d, genom_context self) {
 return self->raise(genom_bad_transition_id, d, sizeof(*d), self);
}
#endif /* _genom_bad_transition_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_interrupted_c_type
# define _genom_interrupted_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_interrupted_id[] = "::genom::interrupted";
typedef struct genom_interrupted_detail genom_interrupted_detail;
#endif /* _genom_interrupted_c_type */

#ifndef _genom_interrupted_definition_c_type
# define _genom_interrupted_definition_c_type
struct genom_interrupted_detail {
 char by[128];
};
static inline genom_event
genom_interrupted(genom_interrupted_detail *d, genom_context self) {
 return self->raise(genom_interrupted_id, d, sizeof(*d), self);
}
#endif /* _genom_interrupted_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_serialization_c_type
# define _genom_serialization_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_serialization_id[] = "::genom::serialization";
typedef void genom_serialization_detail;
#endif /* _genom_serialization_c_type */

#ifndef _genom_serialization_definition_c_type
# define _genom_serialization_definition_c_type
static inline genom_event
genom_serialization(genom_context self) {
 return self->raise(genom_serialization_id, NULL, 0, self);
}
#endif /* _genom_serialization_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_too_many_activities_c_type
# define _genom_too_many_activities_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_too_many_activities_id[] = "::genom::too_many_activities";
typedef void genom_too_many_activities_detail;
#endif /* _genom_too_many_activities_c_type */

#ifndef _genom_too_many_activities_definition_c_type
# define _genom_too_many_activities_definition_c_type
static inline genom_event
genom_too_many_activities(genom_context self) {
 return self->raise(genom_too_many_activities_id, NULL, 0, self);
}
#endif /* _genom_too_many_activities_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_disallowed_c_type
# define _genom_disallowed_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_disallowed_id[] = "::genom::disallowed";
typedef void genom_disallowed_detail;
#endif /* _genom_disallowed_c_type */

#ifndef _genom_disallowed_definition_c_type
# define _genom_disallowed_definition_c_type
static inline genom_event
genom_disallowed(genom_context self) {
 return self->raise(genom_disallowed_id, NULL, 0, self);
}
#endif /* _genom_disallowed_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_mwerr_c_type
# define _genom_mwerr_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_mwerr_id[] = "::genom::mwerr";
typedef struct genom_mwerr_detail genom_mwerr_detail;
#endif /* _genom_mwerr_c_type */

#ifndef _genom_mwerr_definition_c_type
# define _genom_mwerr_definition_c_type
struct genom_mwerr_detail {
 char what[256];
};
static inline genom_event
genom_mwerr(genom_mwerr_detail *d, genom_context self) {
 return self->raise(genom_mwerr_id, d, sizeof(*d), self);
}
#endif /* _genom_mwerr_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_activity_c_type
# define _genom_no_such_activity_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_activity_id[] = "::genom::no_such_activity";
typedef void genom_no_such_activity_detail;
#endif /* _genom_no_such_activity_c_type */

#ifndef _genom_no_such_activity_definition_c_type
# define _genom_no_such_activity_definition_c_type
static inline genom_event
genom_no_such_activity(genom_context self) {
 return self->raise(genom_no_such_activity_id, NULL, 0, self);
}
#endif /* _genom_no_such_activity_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_inport_c_type
# define _genom_no_such_inport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_inport_id[] = "::genom::no_such_inport";
typedef void genom_no_such_inport_detail;
#endif /* _genom_no_such_inport_c_type */

#ifndef _genom_no_such_inport_definition_c_type
# define _genom_no_such_inport_definition_c_type
static inline genom_event
genom_no_such_inport(genom_context self) {
 return self->raise(genom_no_such_inport_id, NULL, 0, self);
}
#endif /* _genom_no_such_inport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_outport_c_type
# define _genom_no_such_outport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_outport_id[] = "::genom::no_such_outport";
typedef void genom_no_such_outport_detail;
#endif /* _genom_no_such_outport_c_type */

#ifndef _genom_no_such_outport_definition_c_type
# define _genom_no_such_outport_definition_c_type
static inline genom_event
genom_no_such_outport(genom_context self) {
 return self->raise(genom_no_such_outport_id, NULL, 0, self);
}
#endif /* _genom_no_such_outport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_port_io_c_type
# define _genom_port_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_port_io_id[] = "::genom::port_io";
typedef void genom_port_io_detail;
#endif /* _genom_port_io_c_type */

#ifndef _genom_port_io_definition_c_type
# define _genom_port_io_definition_c_type
static inline genom_event
genom_port_io(genom_context self) {
 return self->raise(genom_port_io_id, NULL, 0, self);
}
#endif /* _genom_port_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_remote_c_type
# define _genom_no_such_remote_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_remote_id[] = "::genom::no_such_remote";
typedef void genom_no_such_remote_detail;
#endif /* _genom_no_such_remote_c_type */

#ifndef _genom_no_such_remote_definition_c_type
# define _genom_no_such_remote_definition_c_type
static inline genom_event
genom_no_such_remote(genom_context self) {
 return self->raise(genom_no_such_remote_id, NULL, 0, self);
}
#endif /* _genom_no_such_remote_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_service_c_type
# define _genom_no_such_service_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_service_id[] = "::genom::no_such_service";
typedef void genom_no_such_service_detail;
#endif /* _genom_no_such_service_c_type */

#ifndef _genom_no_such_service_definition_c_type
# define _genom_no_such_service_definition_c_type
static inline genom_event
genom_no_such_service(genom_context self) {
 return self->raise(genom_no_such_service_id, NULL, 0, self);
}
#endif /* _genom_no_such_service_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_remote_io_c_type
# define _genom_remote_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_remote_io_id[] = "::genom::remote_io";
typedef void genom_remote_io_detail;
#endif /* _genom_remote_io_c_type */

#ifndef _genom_remote_io_definition_c_type
# define _genom_remote_io_definition_c_type
static inline genom_event
genom_remote_io(genom_context self) {
 return self->raise(genom_remote_io_id, NULL, 0, self);
}
#endif /* _genom_remote_io_definition_c_type */


#ifndef _nhfc_ids_servo_s_sat_s_c_type
# define _nhfc_ids_servo_s_sat_s_c_type
typedef struct nhfc_ids_servo_s_sat_s nhfc_ids_servo_s_sat_s;
#endif /* _nhfc_ids_servo_s_sat_s_c_type */

#ifndef _nhfc_ids_servo_s_sat_s_definition_c_type
# define _nhfc_ids_servo_s_sat_s_definition_c_type
struct nhfc_ids_servo_s_sat_s {
 double x;
 double v;
 double ix;
};
#endif /* _nhfc_ids_servo_s_sat_s_definition_c_type */


#ifndef _nhfc_ids_servo_s_gain_s_c_type
# define _nhfc_ids_servo_s_gain_s_c_type
typedef struct nhfc_ids_servo_s_gain_s nhfc_ids_servo_s_gain_s;
#endif /* _nhfc_ids_servo_s_gain_s_c_type */

#ifndef _nhfc_ids_servo_s_gain_s_definition_c_type
# define _nhfc_ids_servo_s_gain_s_definition_c_type
struct nhfc_ids_servo_s_gain_s {
 double Kpxy;
 double Kpz;
 double Kqxy;
 double Kqz;
 double Kvxy;
 double Kvz;
 double Kwxy;
 double Kwz;
 double Kixy;
 double Kiz;
};
#endif /* _nhfc_ids_servo_s_gain_s_definition_c_type */

#include <stdint.h>

#ifndef _nhfc_attitude_control_mode_c_type
# define _nhfc_attitude_control_mode_c_type
typedef uint32_t nhfc_attitude_control_mode;
enum {
  nhfc_full_attitude =	0,
  nhfc_tilt_prioritized =	1
};
#endif /* _nhfc_attitude_control_mode_c_type */





#include "genom3/c/context.h"

#ifndef _nhfc_e_inval_c_type
# define _nhfc_e_inval_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak nhfc_e_inval_id[] = "::nhfc::e_inval";
typedef struct nhfc_e_inval_detail nhfc_e_inval_detail;
#endif /* _nhfc_e_inval_c_type */

#ifndef _nhfc_e_inval_definition_c_type
# define _nhfc_e_inval_definition_c_type
struct nhfc_e_inval_detail {
 char what[128];
};
static inline genom_event
nhfc_e_inval(nhfc_e_inval_detail *d, genom_context self) {
 return self->raise(nhfc_e_inval_id, d, sizeof(*d), self);
}
#endif /* _nhfc_e_inval_definition_c_type */


#ifndef _nhfc_ids_servo_s_emerg_s_c_type
# define _nhfc_ids_servo_s_emerg_s_c_type
typedef struct nhfc_ids_servo_s_emerg_s nhfc_ids_servo_s_emerg_s;
#endif /* _nhfc_ids_servo_s_emerg_s_c_type */

#ifndef _nhfc_ids_servo_s_emerg_s_definition_c_type
# define _nhfc_ids_servo_s_emerg_s_definition_c_type
struct nhfc_ids_servo_s_emerg_s {
 double descent;
 double dx;
 double dq;
 double dv;
 double dw;
};
#endif /* _nhfc_ids_servo_s_emerg_s_definition_c_type */


#ifndef _nhfc_ids_servo_s_c_type
# define _nhfc_ids_servo_s_c_type
typedef struct nhfc_ids_servo_s nhfc_ids_servo_s;
#endif /* _nhfc_ids_servo_s_c_type */

#ifndef _nhfc_ids_servo_s_definition_c_type
# define _nhfc_ids_servo_s_definition_c_type
struct nhfc_ids_servo_s {
 nhfc_ids_servo_s_sat_s sat;
 nhfc_ids_servo_s_gain_s gain;
 nhfc_attitude_control_mode att_mode;
 double ramp;
 double scale;
 nhfc_ids_servo_s_emerg_s emerg;
};
#endif /* _nhfc_ids_servo_s_definition_c_type */


#include <stdint.h>
#include <stdbool.h>

#ifndef _nhfc_ids_body_s_c_type
# define _nhfc_ids_body_s_c_type
typedef struct nhfc_ids_body_s nhfc_ids_body_s;
#endif /* _nhfc_ids_body_s_c_type */

#ifndef _nhfc_ids_body_s_definition_c_type
# define _nhfc_ids_body_s_definition_c_type
struct nhfc_ids_body_s {
 double G[48];
 double iG[48];
 double J[9];
 double mass;
 uint16_t rotors;
 double wmin;
 double wmax;
 double thrust_min[3];
 double thrust_max[3];
 bool init;
};
#endif /* _nhfc_ids_body_s_definition_c_type */


#ifndef _nhfc_ids_wo_s_c_type
# define _nhfc_ids_wo_s_c_type
typedef struct nhfc_ids_wo_s nhfc_ids_wo_s;
#endif /* _nhfc_ids_wo_s_c_type */

#ifndef _nhfc_ids_wo_s_definition_c_type
# define _nhfc_ids_wo_s_definition_c_type
struct nhfc_ids_wo_s {
 double K[6];
 double bias[6];
};
#endif /* _nhfc_ids_wo_s_definition_c_type */

#include <stdbool.h>

#ifndef _nhfc_ids_af_s_c_type
# define _nhfc_ids_af_s_c_type
typedef struct nhfc_ids_af_s nhfc_ids_af_s;
#endif /* _nhfc_ids_af_s_c_type */

#ifndef _nhfc_ids_af_s_definition_c_type
# define _nhfc_ids_af_s_definition_c_type
struct nhfc_ids_af_s {
 bool enable;
 double mass;
 double B[6];
 double K[6];
 double J[9];
 or_rb3d_force force;
 or_rb3d_torque torque;
};
#endif /* _nhfc_ids_af_s_definition_c_type */

#include "genom3/c/context.h"

#ifndef _nhfc_e_input_c_type
# define _nhfc_e_input_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak nhfc_e_input_id[] = "::nhfc::e_input";
typedef void nhfc_e_input_detail;
#endif /* _nhfc_e_input_c_type */

#ifndef _nhfc_e_input_definition_c_type
# define _nhfc_e_input_definition_c_type
static inline genom_event
nhfc_e_input(genom_context self) {
 return self->raise(nhfc_e_input_id, NULL, 0, self);
}
#endif /* _nhfc_e_input_definition_c_type */

#include "genom3/c/context.h"

#ifndef _nhfc_e_geom_c_type
# define _nhfc_e_geom_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak nhfc_e_geom_id[] = "::nhfc::e_geom";
typedef void nhfc_e_geom_detail;
#endif /* _nhfc_e_geom_c_type */

#ifndef _nhfc_e_geom_definition_c_type
# define _nhfc_e_geom_definition_c_type
static inline genom_event
nhfc_e_geom(genom_context self) {
 return self->raise(nhfc_e_geom_id, NULL, 0, self);
}
#endif /* _nhfc_e_geom_definition_c_type */

#include <stdint.h>
#include "genom3/c/context.h"

#ifndef _nhfc_e_sys_c_type
# define _nhfc_e_sys_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak nhfc_e_sys_id[] = "::nhfc::e_sys";
typedef struct nhfc_e_sys_detail nhfc_e_sys_detail;
#endif /* _nhfc_e_sys_c_type */

#ifndef _nhfc_e_sys_definition_c_type
# define _nhfc_e_sys_definition_c_type
struct nhfc_e_sys_detail {
 int16_t code;
 char what[128];
};
static inline genom_event
nhfc_e_sys(nhfc_e_sys_detail *d, genom_context self) {
 return self->raise(nhfc_e_sys_id, d, sizeof(*d), self);
}
#endif /* _nhfc_e_sys_definition_c_type */



/* --- Service input and output structures --------------------------------- */


/* input of abort_activity */
struct genom_nhfc_abort_activity_input {
  uint32_t activity;
};

/* output of abort_activity */
struct genom_nhfc_abort_activity_output {
};


/* input of connect_port */
struct genom_nhfc_connect_port_input {
  char local[128];
  char remote[128];
};

/* output of connect_port */
struct genom_nhfc_connect_port_output {
};


/* input of connect_service */
struct genom_nhfc_connect_service_input {
  char local[128];
  char remote[128];
};

/* output of connect_service */
struct genom_nhfc_connect_service_output {
};


/* input of kill */
struct genom_nhfc_kill_input {
};

/* output of kill */
struct genom_nhfc_kill_output {
};


/* input of set_saturation */
struct genom_nhfc_set_saturation_input {
  nhfc_ids_servo_s_sat_s sat;
};

/* output of set_saturation */
struct genom_nhfc_set_saturation_output {
};


/* input of set_servo_gain */
struct genom_nhfc_set_servo_gain_input {
  nhfc_ids_servo_s_gain_s gain;
};

/* output of set_servo_gain */
struct genom_nhfc_set_servo_gain_output {
};


/* input of set_control_mode */
struct genom_nhfc_set_control_mode_input {
  nhfc_attitude_control_mode att_mode;
};

/* output of set_control_mode */
struct genom_nhfc_set_control_mode_output {
};


/* input of set_wlimit */
struct genom_nhfc_set_wlimit_input {
  double wmin;
  double wmax;
};

/* output of set_wlimit */
struct genom_nhfc_set_wlimit_output {
};


/* input of set_mass */
struct genom_nhfc_set_mass_input {
  double mass;
};

/* output of set_mass */
struct genom_nhfc_set_mass_output {
};


/* input of set_geom */
struct genom_nhfc_set_geom_input {
  double mass;
  double G[48];
  double J[9];
};

/* output of set_geom */
struct genom_nhfc_set_geom_output {
};


/* input of set_gtmrp_geom */
struct genom_nhfc_set_gtmrp_geom_input {
  uint16_t rotors;
  double cx;
  double cy;
  double cz;
  double armlen;
  double mass;
  double mbodyw;
  double mbodyh;
  double mmotor;
  double rx;
  double ry;
  int16_t rz;
  double cf;
  double ct;
};

/* output of set_gtmrp_geom */
struct genom_nhfc_set_gtmrp_geom_output {
};


/* input of set_emerg */
struct genom_nhfc_set_emerg_input {
  nhfc_ids_servo_s_emerg_s emerg;
};

/* output of set_emerg */
struct genom_nhfc_set_emerg_output {
};


/* input of set_wo_gains */
struct genom_nhfc_set_wo_gains_input {
  double K[6];
};

/* output of set_wo_gains */
struct genom_nhfc_set_wo_gains_output {
};


/* input of set_af_parameters */
struct genom_nhfc_set_af_parameters_input {
  double mass;
  double B[6];
  double K[6];
  double J[9];
};

/* output of set_af_parameters */
struct genom_nhfc_set_af_parameters_output {
};


/* input of set_af_wrench */
struct genom_nhfc_set_af_wrench_input {
  or_rb3d_force force;
  or_rb3d_torque torque;
};

/* output of set_af_wrench */
struct genom_nhfc_set_af_wrench_output {
};


/* input of set_af_enable */
struct genom_nhfc_set_af_enable_input {
  bool enable;
};

/* output of set_af_enable */
struct genom_nhfc_set_af_enable_output {
};


/* input of get_servo_parameters */
struct genom_nhfc_get_servo_parameters_input {
};

/* output of get_servo_parameters */
struct genom_nhfc_get_servo_parameters_output {
  nhfc_ids_servo_s servo;
};


/* input of get_body_parameters */
struct genom_nhfc_get_body_parameters_input {
};

/* output of get_body_parameters */
struct genom_nhfc_get_body_parameters_output {
  nhfc_ids_body_s body;
};


/* input of get_reference */
struct genom_nhfc_get_reference_input {
};

/* output of get_reference */
struct genom_nhfc_get_reference_output {
  or_rigid_body_state reference;
};


/* input of get_wo_parameters */
struct genom_nhfc_get_wo_parameters_input {
};

/* output of get_wo_parameters */
struct genom_nhfc_get_wo_parameters_output {
  nhfc_ids_wo_s wo;
};


/* input of get_af_parameters */
struct genom_nhfc_get_af_parameters_input {
};

/* output of get_af_parameters */
struct genom_nhfc_get_af_parameters_output {
  nhfc_ids_af_s af;
};


/* input of servo */
struct genom_nhfc_servo_input {
};

/* output of servo */
struct genom_nhfc_servo_output {
};


/* input of set_state */
struct genom_nhfc_set_state_input {
  or_t3d_pos pos;
  or_t3d_att att;
  or_t3d_vel vel;
  or_t3d_avel avel;
  or_t3d_acc acc;
};

/* output of set_state */
struct genom_nhfc_set_state_output {
};


/* input of set_position */
struct genom_nhfc_set_position_input {
  double x;
  double y;
  double z;
  double yaw;
};

/* output of set_position */
struct genom_nhfc_set_position_output {
};


/* input of set_current_position */
struct genom_nhfc_set_current_position_input {
};

/* output of set_current_position */
struct genom_nhfc_set_current_position_output {
};


/* input of set_velocity */
struct genom_nhfc_set_velocity_input {
  double x;
  double y;
  double z;
  double yaw;
};

/* output of set_velocity */
struct genom_nhfc_set_velocity_output {
};


/* input of stop */
struct genom_nhfc_stop_input {
};

/* output of stop */
struct genom_nhfc_stop_output {
};


/* input of set_wo_zero */
struct genom_nhfc_set_wo_zero_input {
  double duration;
};

/* output of set_wo_zero */
struct genom_nhfc_set_wo_zero_output {
};


/* input of log */
struct genom_nhfc_log_input {
  char path[64];
  uint32_t decimation;
};

/* output of log */
struct genom_nhfc_log_output {
};


/* input of log_stop */
struct genom_nhfc_log_stop_input {
};

/* output of log_stop */
struct genom_nhfc_log_stop_output {
};


/* input of log_info */
struct genom_nhfc_log_info_input {
};

/* output of log_info */
struct genom_nhfc_log_info_output {
  uint32_t miss;
  uint32_t total;
};



#ifdef __cplusplus
extern "C" {
#endif

/* --- Services ------------------------------------------------------------ */

genom_client		genom_nhfc_client_init(int argc, char *argv[],
                                genom_event *ex, const void **exdetail);
void			genom_nhfc_client_fini(genom_client h);
genom_context		genom_nhfc_client_context(genom_client h);
const char *		genom_nhfc_client_instance(genom_client h);
int			genom_nhfc_client_eventfd(genom_client h);
const struct genom_service_info *
			genom_nhfc_client_service_info(genom_client h,
				int rqstid);
int			genom_nhfc_client_done(genom_client h, int rqstid);
genom_event		genom_nhfc_client_wait(genom_client h, int rqstid);
genom_event		genom_nhfc_client_clean(genom_client h,
				int rqstid);
genom_event		genom_nhfc_client_abort(genom_client h,
                                int rqstid);
genom_event		genom_nhfc_client_doevents(genom_client h);
char *			genom_nhfc_client_json_error(genom_client h,
				genom_event e, const void *detail);

/* abort_activity */
typedef void (*nhfc_abort_activity_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_abort_activity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_abort_activity_rqst(
  genom_client h,
  const struct genom_nhfc_abort_activity_input *in,
  nhfc_abort_activity_cb sentcb, nhfc_abort_activity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_abort_activity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_abort_activity_output **out,
  void **exdetail);

void	genom_nhfc_client_abort_activity_init_input(
  struct genom_nhfc_abort_activity_input *input);
void	genom_nhfc_client_abort_activity_init_output(
  struct genom_nhfc_abort_activity_output *output);
void	genom_nhfc_client_abort_activity_fini_input(
  struct genom_nhfc_abort_activity_input *input);
void	genom_nhfc_client_abort_activity_fini_output(
  struct genom_nhfc_abort_activity_output *output);

int	genom_nhfc_client_abort_activity_json_scan(
  struct genom_nhfc_abort_activity_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_abort_activity_json_print(
  char **json, const struct genom_nhfc_abort_activity_output *out);

/* connect_port */
typedef void (*nhfc_connect_port_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_connect_port_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_connect_port_rqst(
  genom_client h,
  const struct genom_nhfc_connect_port_input *in,
  nhfc_connect_port_cb sentcb, nhfc_connect_port_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_connect_port_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_connect_port_output **out,
  void **exdetail);

void	genom_nhfc_client_connect_port_init_input(
  struct genom_nhfc_connect_port_input *input);
void	genom_nhfc_client_connect_port_init_output(
  struct genom_nhfc_connect_port_output *output);
void	genom_nhfc_client_connect_port_fini_input(
  struct genom_nhfc_connect_port_input *input);
void	genom_nhfc_client_connect_port_fini_output(
  struct genom_nhfc_connect_port_output *output);

int	genom_nhfc_client_connect_port_json_scan(
  struct genom_nhfc_connect_port_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_connect_port_json_print(
  char **json, const struct genom_nhfc_connect_port_output *out);

/* connect_service */
typedef void (*nhfc_connect_service_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_connect_service_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_connect_service_rqst(
  genom_client h,
  const struct genom_nhfc_connect_service_input *in,
  nhfc_connect_service_cb sentcb, nhfc_connect_service_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_connect_service_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_connect_service_output **out,
  void **exdetail);

void	genom_nhfc_client_connect_service_init_input(
  struct genom_nhfc_connect_service_input *input);
void	genom_nhfc_client_connect_service_init_output(
  struct genom_nhfc_connect_service_output *output);
void	genom_nhfc_client_connect_service_fini_input(
  struct genom_nhfc_connect_service_input *input);
void	genom_nhfc_client_connect_service_fini_output(
  struct genom_nhfc_connect_service_output *output);

int	genom_nhfc_client_connect_service_json_scan(
  struct genom_nhfc_connect_service_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_connect_service_json_print(
  char **json, const struct genom_nhfc_connect_service_output *out);

/* kill */
typedef void (*nhfc_kill_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_kill_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_kill_rqst(
  genom_client h,
  const struct genom_nhfc_kill_input *in,
  nhfc_kill_cb sentcb, nhfc_kill_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_kill_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_kill_output **out,
  void **exdetail);

void	genom_nhfc_client_kill_init_input(
  struct genom_nhfc_kill_input *input);
void	genom_nhfc_client_kill_init_output(
  struct genom_nhfc_kill_output *output);
void	genom_nhfc_client_kill_fini_input(
  struct genom_nhfc_kill_input *input);
void	genom_nhfc_client_kill_fini_output(
  struct genom_nhfc_kill_output *output);

int	genom_nhfc_client_kill_json_scan(
  struct genom_nhfc_kill_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_kill_json_print(
  char **json, const struct genom_nhfc_kill_output *out);

/* set_saturation */
typedef void (*nhfc_set_saturation_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_saturation_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_saturation_rqst(
  genom_client h,
  const struct genom_nhfc_set_saturation_input *in,
  nhfc_set_saturation_cb sentcb, nhfc_set_saturation_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_saturation_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_saturation_output **out,
  void **exdetail);

void	genom_nhfc_client_set_saturation_init_input(
  struct genom_nhfc_set_saturation_input *input);
void	genom_nhfc_client_set_saturation_init_output(
  struct genom_nhfc_set_saturation_output *output);
void	genom_nhfc_client_set_saturation_fini_input(
  struct genom_nhfc_set_saturation_input *input);
void	genom_nhfc_client_set_saturation_fini_output(
  struct genom_nhfc_set_saturation_output *output);

int	genom_nhfc_client_set_saturation_json_scan(
  struct genom_nhfc_set_saturation_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_saturation_json_print(
  char **json, const struct genom_nhfc_set_saturation_output *out);

/* set_servo_gain */
typedef void (*nhfc_set_servo_gain_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_servo_gain_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_servo_gain_rqst(
  genom_client h,
  const struct genom_nhfc_set_servo_gain_input *in,
  nhfc_set_servo_gain_cb sentcb, nhfc_set_servo_gain_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_servo_gain_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_servo_gain_output **out,
  void **exdetail);

void	genom_nhfc_client_set_servo_gain_init_input(
  struct genom_nhfc_set_servo_gain_input *input);
void	genom_nhfc_client_set_servo_gain_init_output(
  struct genom_nhfc_set_servo_gain_output *output);
void	genom_nhfc_client_set_servo_gain_fini_input(
  struct genom_nhfc_set_servo_gain_input *input);
void	genom_nhfc_client_set_servo_gain_fini_output(
  struct genom_nhfc_set_servo_gain_output *output);

int	genom_nhfc_client_set_servo_gain_json_scan(
  struct genom_nhfc_set_servo_gain_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_servo_gain_json_print(
  char **json, const struct genom_nhfc_set_servo_gain_output *out);

/* set_control_mode */
typedef void (*nhfc_set_control_mode_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_control_mode_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_control_mode_rqst(
  genom_client h,
  const struct genom_nhfc_set_control_mode_input *in,
  nhfc_set_control_mode_cb sentcb, nhfc_set_control_mode_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_control_mode_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_control_mode_output **out,
  void **exdetail);

void	genom_nhfc_client_set_control_mode_init_input(
  struct genom_nhfc_set_control_mode_input *input);
void	genom_nhfc_client_set_control_mode_init_output(
  struct genom_nhfc_set_control_mode_output *output);
void	genom_nhfc_client_set_control_mode_fini_input(
  struct genom_nhfc_set_control_mode_input *input);
void	genom_nhfc_client_set_control_mode_fini_output(
  struct genom_nhfc_set_control_mode_output *output);

int	genom_nhfc_client_set_control_mode_json_scan(
  struct genom_nhfc_set_control_mode_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_control_mode_json_print(
  char **json, const struct genom_nhfc_set_control_mode_output *out);

/* set_wlimit */
typedef void (*nhfc_set_wlimit_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_wlimit_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_wlimit_rqst(
  genom_client h,
  const struct genom_nhfc_set_wlimit_input *in,
  nhfc_set_wlimit_cb sentcb, nhfc_set_wlimit_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_wlimit_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_wlimit_output **out,
  void **exdetail);

void	genom_nhfc_client_set_wlimit_init_input(
  struct genom_nhfc_set_wlimit_input *input);
void	genom_nhfc_client_set_wlimit_init_output(
  struct genom_nhfc_set_wlimit_output *output);
void	genom_nhfc_client_set_wlimit_fini_input(
  struct genom_nhfc_set_wlimit_input *input);
void	genom_nhfc_client_set_wlimit_fini_output(
  struct genom_nhfc_set_wlimit_output *output);

int	genom_nhfc_client_set_wlimit_json_scan(
  struct genom_nhfc_set_wlimit_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_wlimit_json_print(
  char **json, const struct genom_nhfc_set_wlimit_output *out);

/* set_mass */
typedef void (*nhfc_set_mass_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_mass_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_mass_rqst(
  genom_client h,
  const struct genom_nhfc_set_mass_input *in,
  nhfc_set_mass_cb sentcb, nhfc_set_mass_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_mass_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_mass_output **out,
  void **exdetail);

void	genom_nhfc_client_set_mass_init_input(
  struct genom_nhfc_set_mass_input *input);
void	genom_nhfc_client_set_mass_init_output(
  struct genom_nhfc_set_mass_output *output);
void	genom_nhfc_client_set_mass_fini_input(
  struct genom_nhfc_set_mass_input *input);
void	genom_nhfc_client_set_mass_fini_output(
  struct genom_nhfc_set_mass_output *output);

int	genom_nhfc_client_set_mass_json_scan(
  struct genom_nhfc_set_mass_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_mass_json_print(
  char **json, const struct genom_nhfc_set_mass_output *out);

/* set_geom */
typedef void (*nhfc_set_geom_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_geom_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_geom_rqst(
  genom_client h,
  const struct genom_nhfc_set_geom_input *in,
  nhfc_set_geom_cb sentcb, nhfc_set_geom_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_geom_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_geom_output **out,
  void **exdetail);

void	genom_nhfc_client_set_geom_init_input(
  struct genom_nhfc_set_geom_input *input);
void	genom_nhfc_client_set_geom_init_output(
  struct genom_nhfc_set_geom_output *output);
void	genom_nhfc_client_set_geom_fini_input(
  struct genom_nhfc_set_geom_input *input);
void	genom_nhfc_client_set_geom_fini_output(
  struct genom_nhfc_set_geom_output *output);

int	genom_nhfc_client_set_geom_json_scan(
  struct genom_nhfc_set_geom_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_geom_json_print(
  char **json, const struct genom_nhfc_set_geom_output *out);

/* set_gtmrp_geom */
typedef void (*nhfc_set_gtmrp_geom_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_gtmrp_geom_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_gtmrp_geom_rqst(
  genom_client h,
  const struct genom_nhfc_set_gtmrp_geom_input *in,
  nhfc_set_gtmrp_geom_cb sentcb, nhfc_set_gtmrp_geom_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_gtmrp_geom_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_gtmrp_geom_output **out,
  void **exdetail);

void	genom_nhfc_client_set_gtmrp_geom_init_input(
  struct genom_nhfc_set_gtmrp_geom_input *input);
void	genom_nhfc_client_set_gtmrp_geom_init_output(
  struct genom_nhfc_set_gtmrp_geom_output *output);
void	genom_nhfc_client_set_gtmrp_geom_fini_input(
  struct genom_nhfc_set_gtmrp_geom_input *input);
void	genom_nhfc_client_set_gtmrp_geom_fini_output(
  struct genom_nhfc_set_gtmrp_geom_output *output);

int	genom_nhfc_client_set_gtmrp_geom_json_scan(
  struct genom_nhfc_set_gtmrp_geom_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_gtmrp_geom_json_print(
  char **json, const struct genom_nhfc_set_gtmrp_geom_output *out);

/* set_emerg */
typedef void (*nhfc_set_emerg_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_emerg_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_emerg_rqst(
  genom_client h,
  const struct genom_nhfc_set_emerg_input *in,
  nhfc_set_emerg_cb sentcb, nhfc_set_emerg_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_emerg_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_emerg_output **out,
  void **exdetail);

void	genom_nhfc_client_set_emerg_init_input(
  struct genom_nhfc_set_emerg_input *input);
void	genom_nhfc_client_set_emerg_init_output(
  struct genom_nhfc_set_emerg_output *output);
void	genom_nhfc_client_set_emerg_fini_input(
  struct genom_nhfc_set_emerg_input *input);
void	genom_nhfc_client_set_emerg_fini_output(
  struct genom_nhfc_set_emerg_output *output);

int	genom_nhfc_client_set_emerg_json_scan(
  struct genom_nhfc_set_emerg_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_emerg_json_print(
  char **json, const struct genom_nhfc_set_emerg_output *out);

/* set_wo_gains */
typedef void (*nhfc_set_wo_gains_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_wo_gains_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_wo_gains_rqst(
  genom_client h,
  const struct genom_nhfc_set_wo_gains_input *in,
  nhfc_set_wo_gains_cb sentcb, nhfc_set_wo_gains_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_wo_gains_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_wo_gains_output **out,
  void **exdetail);

void	genom_nhfc_client_set_wo_gains_init_input(
  struct genom_nhfc_set_wo_gains_input *input);
void	genom_nhfc_client_set_wo_gains_init_output(
  struct genom_nhfc_set_wo_gains_output *output);
void	genom_nhfc_client_set_wo_gains_fini_input(
  struct genom_nhfc_set_wo_gains_input *input);
void	genom_nhfc_client_set_wo_gains_fini_output(
  struct genom_nhfc_set_wo_gains_output *output);

int	genom_nhfc_client_set_wo_gains_json_scan(
  struct genom_nhfc_set_wo_gains_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_wo_gains_json_print(
  char **json, const struct genom_nhfc_set_wo_gains_output *out);

/* set_af_parameters */
typedef void (*nhfc_set_af_parameters_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_af_parameters_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_af_parameters_rqst(
  genom_client h,
  const struct genom_nhfc_set_af_parameters_input *in,
  nhfc_set_af_parameters_cb sentcb, nhfc_set_af_parameters_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_af_parameters_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_af_parameters_output **out,
  void **exdetail);

void	genom_nhfc_client_set_af_parameters_init_input(
  struct genom_nhfc_set_af_parameters_input *input);
void	genom_nhfc_client_set_af_parameters_init_output(
  struct genom_nhfc_set_af_parameters_output *output);
void	genom_nhfc_client_set_af_parameters_fini_input(
  struct genom_nhfc_set_af_parameters_input *input);
void	genom_nhfc_client_set_af_parameters_fini_output(
  struct genom_nhfc_set_af_parameters_output *output);

int	genom_nhfc_client_set_af_parameters_json_scan(
  struct genom_nhfc_set_af_parameters_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_af_parameters_json_print(
  char **json, const struct genom_nhfc_set_af_parameters_output *out);

/* set_af_wrench */
typedef void (*nhfc_set_af_wrench_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_af_wrench_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_af_wrench_rqst(
  genom_client h,
  const struct genom_nhfc_set_af_wrench_input *in,
  nhfc_set_af_wrench_cb sentcb, nhfc_set_af_wrench_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_af_wrench_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_af_wrench_output **out,
  void **exdetail);

void	genom_nhfc_client_set_af_wrench_init_input(
  struct genom_nhfc_set_af_wrench_input *input);
void	genom_nhfc_client_set_af_wrench_init_output(
  struct genom_nhfc_set_af_wrench_output *output);
void	genom_nhfc_client_set_af_wrench_fini_input(
  struct genom_nhfc_set_af_wrench_input *input);
void	genom_nhfc_client_set_af_wrench_fini_output(
  struct genom_nhfc_set_af_wrench_output *output);

int	genom_nhfc_client_set_af_wrench_json_scan(
  struct genom_nhfc_set_af_wrench_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_af_wrench_json_print(
  char **json, const struct genom_nhfc_set_af_wrench_output *out);

/* set_af_enable */
typedef void (*nhfc_set_af_enable_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_af_enable_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_af_enable_rqst(
  genom_client h,
  const struct genom_nhfc_set_af_enable_input *in,
  nhfc_set_af_enable_cb sentcb, nhfc_set_af_enable_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_af_enable_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_af_enable_output **out,
  void **exdetail);

void	genom_nhfc_client_set_af_enable_init_input(
  struct genom_nhfc_set_af_enable_input *input);
void	genom_nhfc_client_set_af_enable_init_output(
  struct genom_nhfc_set_af_enable_output *output);
void	genom_nhfc_client_set_af_enable_fini_input(
  struct genom_nhfc_set_af_enable_input *input);
void	genom_nhfc_client_set_af_enable_fini_output(
  struct genom_nhfc_set_af_enable_output *output);

int	genom_nhfc_client_set_af_enable_json_scan(
  struct genom_nhfc_set_af_enable_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_af_enable_json_print(
  char **json, const struct genom_nhfc_set_af_enable_output *out);

/* get_servo_parameters */
typedef void (*nhfc_get_servo_parameters_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_get_servo_parameters_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_get_servo_parameters_rqst(
  genom_client h,
  const struct genom_nhfc_get_servo_parameters_input *in,
  nhfc_get_servo_parameters_cb sentcb, nhfc_get_servo_parameters_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_get_servo_parameters_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_get_servo_parameters_output **out,
  void **exdetail);

void	genom_nhfc_client_get_servo_parameters_init_input(
  struct genom_nhfc_get_servo_parameters_input *input);
void	genom_nhfc_client_get_servo_parameters_init_output(
  struct genom_nhfc_get_servo_parameters_output *output);
void	genom_nhfc_client_get_servo_parameters_fini_input(
  struct genom_nhfc_get_servo_parameters_input *input);
void	genom_nhfc_client_get_servo_parameters_fini_output(
  struct genom_nhfc_get_servo_parameters_output *output);

int	genom_nhfc_client_get_servo_parameters_json_scan(
  struct genom_nhfc_get_servo_parameters_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_get_servo_parameters_json_print(
  char **json, const struct genom_nhfc_get_servo_parameters_output *out);

/* get_body_parameters */
typedef void (*nhfc_get_body_parameters_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_get_body_parameters_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_get_body_parameters_rqst(
  genom_client h,
  const struct genom_nhfc_get_body_parameters_input *in,
  nhfc_get_body_parameters_cb sentcb, nhfc_get_body_parameters_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_get_body_parameters_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_get_body_parameters_output **out,
  void **exdetail);

void	genom_nhfc_client_get_body_parameters_init_input(
  struct genom_nhfc_get_body_parameters_input *input);
void	genom_nhfc_client_get_body_parameters_init_output(
  struct genom_nhfc_get_body_parameters_output *output);
void	genom_nhfc_client_get_body_parameters_fini_input(
  struct genom_nhfc_get_body_parameters_input *input);
void	genom_nhfc_client_get_body_parameters_fini_output(
  struct genom_nhfc_get_body_parameters_output *output);

int	genom_nhfc_client_get_body_parameters_json_scan(
  struct genom_nhfc_get_body_parameters_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_get_body_parameters_json_print(
  char **json, const struct genom_nhfc_get_body_parameters_output *out);

/* get_reference */
typedef void (*nhfc_get_reference_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_get_reference_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_get_reference_rqst(
  genom_client h,
  const struct genom_nhfc_get_reference_input *in,
  nhfc_get_reference_cb sentcb, nhfc_get_reference_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_get_reference_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_get_reference_output **out,
  void **exdetail);

void	genom_nhfc_client_get_reference_init_input(
  struct genom_nhfc_get_reference_input *input);
void	genom_nhfc_client_get_reference_init_output(
  struct genom_nhfc_get_reference_output *output);
void	genom_nhfc_client_get_reference_fini_input(
  struct genom_nhfc_get_reference_input *input);
void	genom_nhfc_client_get_reference_fini_output(
  struct genom_nhfc_get_reference_output *output);

int	genom_nhfc_client_get_reference_json_scan(
  struct genom_nhfc_get_reference_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_get_reference_json_print(
  char **json, const struct genom_nhfc_get_reference_output *out);

/* get_wo_parameters */
typedef void (*nhfc_get_wo_parameters_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_get_wo_parameters_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_get_wo_parameters_rqst(
  genom_client h,
  const struct genom_nhfc_get_wo_parameters_input *in,
  nhfc_get_wo_parameters_cb sentcb, nhfc_get_wo_parameters_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_get_wo_parameters_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_get_wo_parameters_output **out,
  void **exdetail);

void	genom_nhfc_client_get_wo_parameters_init_input(
  struct genom_nhfc_get_wo_parameters_input *input);
void	genom_nhfc_client_get_wo_parameters_init_output(
  struct genom_nhfc_get_wo_parameters_output *output);
void	genom_nhfc_client_get_wo_parameters_fini_input(
  struct genom_nhfc_get_wo_parameters_input *input);
void	genom_nhfc_client_get_wo_parameters_fini_output(
  struct genom_nhfc_get_wo_parameters_output *output);

int	genom_nhfc_client_get_wo_parameters_json_scan(
  struct genom_nhfc_get_wo_parameters_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_get_wo_parameters_json_print(
  char **json, const struct genom_nhfc_get_wo_parameters_output *out);

/* get_af_parameters */
typedef void (*nhfc_get_af_parameters_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_get_af_parameters_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_get_af_parameters_rqst(
  genom_client h,
  const struct genom_nhfc_get_af_parameters_input *in,
  nhfc_get_af_parameters_cb sentcb, nhfc_get_af_parameters_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_get_af_parameters_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_get_af_parameters_output **out,
  void **exdetail);

void	genom_nhfc_client_get_af_parameters_init_input(
  struct genom_nhfc_get_af_parameters_input *input);
void	genom_nhfc_client_get_af_parameters_init_output(
  struct genom_nhfc_get_af_parameters_output *output);
void	genom_nhfc_client_get_af_parameters_fini_input(
  struct genom_nhfc_get_af_parameters_input *input);
void	genom_nhfc_client_get_af_parameters_fini_output(
  struct genom_nhfc_get_af_parameters_output *output);

int	genom_nhfc_client_get_af_parameters_json_scan(
  struct genom_nhfc_get_af_parameters_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_get_af_parameters_json_print(
  char **json, const struct genom_nhfc_get_af_parameters_output *out);

/* servo */
typedef void (*nhfc_servo_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_servo_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_servo_rqst(
  genom_client h,
  const struct genom_nhfc_servo_input *in,
  nhfc_servo_cb sentcb, nhfc_servo_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_servo_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_servo_output **out,
  void **exdetail);

void	genom_nhfc_client_servo_init_input(
  struct genom_nhfc_servo_input *input);
void	genom_nhfc_client_servo_init_output(
  struct genom_nhfc_servo_output *output);
void	genom_nhfc_client_servo_fini_input(
  struct genom_nhfc_servo_input *input);
void	genom_nhfc_client_servo_fini_output(
  struct genom_nhfc_servo_output *output);

int	genom_nhfc_client_servo_json_scan(
  struct genom_nhfc_servo_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_servo_json_print(
  char **json, const struct genom_nhfc_servo_output *out);

/* set_state */
typedef void (*nhfc_set_state_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_state_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_state_rqst(
  genom_client h,
  const struct genom_nhfc_set_state_input *in,
  nhfc_set_state_cb sentcb, nhfc_set_state_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_state_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_state_output **out,
  void **exdetail);

void	genom_nhfc_client_set_state_init_input(
  struct genom_nhfc_set_state_input *input);
void	genom_nhfc_client_set_state_init_output(
  struct genom_nhfc_set_state_output *output);
void	genom_nhfc_client_set_state_fini_input(
  struct genom_nhfc_set_state_input *input);
void	genom_nhfc_client_set_state_fini_output(
  struct genom_nhfc_set_state_output *output);

int	genom_nhfc_client_set_state_json_scan(
  struct genom_nhfc_set_state_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_state_json_print(
  char **json, const struct genom_nhfc_set_state_output *out);

/* set_position */
typedef void (*nhfc_set_position_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_position_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_position_rqst(
  genom_client h,
  const struct genom_nhfc_set_position_input *in,
  nhfc_set_position_cb sentcb, nhfc_set_position_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_position_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_position_output **out,
  void **exdetail);

void	genom_nhfc_client_set_position_init_input(
  struct genom_nhfc_set_position_input *input);
void	genom_nhfc_client_set_position_init_output(
  struct genom_nhfc_set_position_output *output);
void	genom_nhfc_client_set_position_fini_input(
  struct genom_nhfc_set_position_input *input);
void	genom_nhfc_client_set_position_fini_output(
  struct genom_nhfc_set_position_output *output);

int	genom_nhfc_client_set_position_json_scan(
  struct genom_nhfc_set_position_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_position_json_print(
  char **json, const struct genom_nhfc_set_position_output *out);

/* set_current_position */
typedef void (*nhfc_set_current_position_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_current_position_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_current_position_rqst(
  genom_client h,
  const struct genom_nhfc_set_current_position_input *in,
  nhfc_set_current_position_cb sentcb, nhfc_set_current_position_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_current_position_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_current_position_output **out,
  void **exdetail);

void	genom_nhfc_client_set_current_position_init_input(
  struct genom_nhfc_set_current_position_input *input);
void	genom_nhfc_client_set_current_position_init_output(
  struct genom_nhfc_set_current_position_output *output);
void	genom_nhfc_client_set_current_position_fini_input(
  struct genom_nhfc_set_current_position_input *input);
void	genom_nhfc_client_set_current_position_fini_output(
  struct genom_nhfc_set_current_position_output *output);

int	genom_nhfc_client_set_current_position_json_scan(
  struct genom_nhfc_set_current_position_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_current_position_json_print(
  char **json, const struct genom_nhfc_set_current_position_output *out);

/* set_velocity */
typedef void (*nhfc_set_velocity_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_velocity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_velocity_rqst(
  genom_client h,
  const struct genom_nhfc_set_velocity_input *in,
  nhfc_set_velocity_cb sentcb, nhfc_set_velocity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_velocity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_velocity_output **out,
  void **exdetail);

void	genom_nhfc_client_set_velocity_init_input(
  struct genom_nhfc_set_velocity_input *input);
void	genom_nhfc_client_set_velocity_init_output(
  struct genom_nhfc_set_velocity_output *output);
void	genom_nhfc_client_set_velocity_fini_input(
  struct genom_nhfc_set_velocity_input *input);
void	genom_nhfc_client_set_velocity_fini_output(
  struct genom_nhfc_set_velocity_output *output);

int	genom_nhfc_client_set_velocity_json_scan(
  struct genom_nhfc_set_velocity_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_velocity_json_print(
  char **json, const struct genom_nhfc_set_velocity_output *out);

/* stop */
typedef void (*nhfc_stop_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_stop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_stop_rqst(
  genom_client h,
  const struct genom_nhfc_stop_input *in,
  nhfc_stop_cb sentcb, nhfc_stop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_stop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_stop_output **out,
  void **exdetail);

void	genom_nhfc_client_stop_init_input(
  struct genom_nhfc_stop_input *input);
void	genom_nhfc_client_stop_init_output(
  struct genom_nhfc_stop_output *output);
void	genom_nhfc_client_stop_fini_input(
  struct genom_nhfc_stop_input *input);
void	genom_nhfc_client_stop_fini_output(
  struct genom_nhfc_stop_output *output);

int	genom_nhfc_client_stop_json_scan(
  struct genom_nhfc_stop_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_stop_json_print(
  char **json, const struct genom_nhfc_stop_output *out);

/* set_wo_zero */
typedef void (*nhfc_set_wo_zero_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_set_wo_zero_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_set_wo_zero_rqst(
  genom_client h,
  const struct genom_nhfc_set_wo_zero_input *in,
  nhfc_set_wo_zero_cb sentcb, nhfc_set_wo_zero_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_set_wo_zero_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_set_wo_zero_output **out,
  void **exdetail);

void	genom_nhfc_client_set_wo_zero_init_input(
  struct genom_nhfc_set_wo_zero_input *input);
void	genom_nhfc_client_set_wo_zero_init_output(
  struct genom_nhfc_set_wo_zero_output *output);
void	genom_nhfc_client_set_wo_zero_fini_input(
  struct genom_nhfc_set_wo_zero_input *input);
void	genom_nhfc_client_set_wo_zero_fini_output(
  struct genom_nhfc_set_wo_zero_output *output);

int	genom_nhfc_client_set_wo_zero_json_scan(
  struct genom_nhfc_set_wo_zero_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_set_wo_zero_json_print(
  char **json, const struct genom_nhfc_set_wo_zero_output *out);

/* log */
typedef void (*nhfc_log_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_log_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_log_rqst(
  genom_client h,
  const struct genom_nhfc_log_input *in,
  nhfc_log_cb sentcb, nhfc_log_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_log_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_log_output **out,
  void **exdetail);

void	genom_nhfc_client_log_init_input(
  struct genom_nhfc_log_input *input);
void	genom_nhfc_client_log_init_output(
  struct genom_nhfc_log_output *output);
void	genom_nhfc_client_log_fini_input(
  struct genom_nhfc_log_input *input);
void	genom_nhfc_client_log_fini_output(
  struct genom_nhfc_log_output *output);

int	genom_nhfc_client_log_json_scan(
  struct genom_nhfc_log_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_log_json_print(
  char **json, const struct genom_nhfc_log_output *out);

/* log_stop */
typedef void (*nhfc_log_stop_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_log_stop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_log_stop_rqst(
  genom_client h,
  const struct genom_nhfc_log_stop_input *in,
  nhfc_log_stop_cb sentcb, nhfc_log_stop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_log_stop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_log_stop_output **out,
  void **exdetail);

void	genom_nhfc_client_log_stop_init_input(
  struct genom_nhfc_log_stop_input *input);
void	genom_nhfc_client_log_stop_init_output(
  struct genom_nhfc_log_stop_output *output);
void	genom_nhfc_client_log_stop_fini_input(
  struct genom_nhfc_log_stop_input *input);
void	genom_nhfc_client_log_stop_fini_output(
  struct genom_nhfc_log_stop_output *output);

int	genom_nhfc_client_log_stop_json_scan(
  struct genom_nhfc_log_stop_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_log_stop_json_print(
  char **json, const struct genom_nhfc_log_stop_output *out);

/* log_info */
typedef void (*nhfc_log_info_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_nhfc_log_info_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_nhfc_client_log_info_rqst(
  genom_client h,
  const struct genom_nhfc_log_info_input *in,
  nhfc_log_info_cb sentcb, nhfc_log_info_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_nhfc_client_log_info_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_nhfc_log_info_output **out,
  void **exdetail);

void	genom_nhfc_client_log_info_init_input(
  struct genom_nhfc_log_info_input *input);
void	genom_nhfc_client_log_info_init_output(
  struct genom_nhfc_log_info_output *output);
void	genom_nhfc_client_log_info_fini_input(
  struct genom_nhfc_log_info_input *input);
void	genom_nhfc_client_log_info_fini_output(
  struct genom_nhfc_log_info_output *output);

int	genom_nhfc_client_log_info_json_scan(
  struct genom_nhfc_log_info_input *in,
  const char *json, char **endptr);
int	genom_nhfc_client_log_info_json_print(
  char **json, const struct genom_nhfc_log_info_output *out);



/* --- Ports --------------------------------------------------------------- */

/* genom_state */
#line 78 "/home/swasiela/openrobots/share/genom/templates/common/genom.gen"
genom_event genom_nhfc_client_genom_state_port(
  genom_client h,
  genom_state_component *data);

/* rotor_input */
#line 53 "/home/swasiela/openrobots/share/idl/openrobots2-idl/or/robot/rotorcraft.gen"
genom_event genom_nhfc_client_rotor_input_port(
  genom_client h,
  or_rotorcraft_input *data);

/* external_wrench */
#line 37 "/home/swasiela/CAMP/src/simulation_genom/genom_custom/src/nhfc-genom3/nhfc.gen"
genom_event genom_nhfc_client_external_wrench_port(
  genom_client h,
  or_wrench_estimator_state *data);


void	genom_nhfc_client_genom_state_init_data(
  genom_state_component *data);
void	genom_nhfc_client_genom_state_fini_data(
  genom_state_component *data);
int	genom_nhfc_client_genom_state_json_print(char **json,
  const genom_state_component *data);

void	genom_nhfc_client_rotor_input_init_data(
  or_rotorcraft_input *data);
void	genom_nhfc_client_rotor_input_fini_data(
  or_rotorcraft_input *data);
int	genom_nhfc_client_rotor_input_json_print(char **json,
  const or_rotorcraft_input *data);

void	genom_nhfc_client_external_wrench_init_data(
  or_wrench_estimator_state *data);
void	genom_nhfc_client_external_wrench_fini_data(
  or_wrench_estimator_state *data);
int	genom_nhfc_client_external_wrench_json_print(char **json,
  const or_wrench_estimator_state *data);




/* --- Data ---------------------------------------------------------------- */

extern const struct genom_client_info genom_nhfc_client_info;

extern const struct genom_service_info *
			genom_nhfc_client_abort_activity_info;
extern const struct genom_service_info *
			genom_nhfc_client_connect_port_info;
extern const struct genom_service_info *
			genom_nhfc_client_connect_service_info;
extern const struct genom_service_info *
			genom_nhfc_client_kill_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_saturation_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_servo_gain_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_control_mode_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_wlimit_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_mass_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_geom_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_gtmrp_geom_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_emerg_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_wo_gains_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_af_parameters_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_af_wrench_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_af_enable_info;
extern const struct genom_service_info *
			genom_nhfc_client_get_servo_parameters_info;
extern const struct genom_service_info *
			genom_nhfc_client_get_body_parameters_info;
extern const struct genom_service_info *
			genom_nhfc_client_get_reference_info;
extern const struct genom_service_info *
			genom_nhfc_client_get_wo_parameters_info;
extern const struct genom_service_info *
			genom_nhfc_client_get_af_parameters_info;
extern const struct genom_service_info *
			genom_nhfc_client_servo_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_state_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_position_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_current_position_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_velocity_info;
extern const struct genom_service_info *
			genom_nhfc_client_stop_info;
extern const struct genom_service_info *
			genom_nhfc_client_set_wo_zero_info;
extern const struct genom_service_info *
			genom_nhfc_client_log_info;
extern const struct genom_service_info *
			genom_nhfc_client_log_stop_info;
extern const struct genom_service_info *
			genom_nhfc_client_log_info_info;

extern const struct genom_port_info *
			genom_nhfc_client_genom_state_info;
extern const struct genom_port_info *
			genom_nhfc_client_rotor_input_info;
extern const struct genom_port_info *
			genom_nhfc_client_external_wrench_info;

#ifdef __cplusplus
}
#endif

#endif /* H_NHFC_CLIENT */
