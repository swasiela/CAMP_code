/* --- Generated by genom 2.99.40. Do not edit -------------------------- */
/*
 * Copyright (c) 2016-2021 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution and use  in source  and binary  forms,  with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 *                                      Anthony Mallet on Mon Aug 22 2016
 */


#ifndef H_MANEUVER_CLIENT
#define H_MANEUVER_CLIENT


#include "genom3/c/client.h"


/* --- Interface types ----------------------------------------------------- */





#ifndef _genom_state_stats_c_type
# define _genom_state_stats_c_type
typedef struct genom_state_stats genom_state_stats;
#endif /* _genom_state_stats_c_type */

#ifndef _genom_state_stats_definition_c_type
# define _genom_state_stats_definition_c_type
struct genom_state_stats {
 float last;
 float max;
 float avg;
};
#endif /* _genom_state_stats_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_rusage_c_type
# define _genom_state_rusage_c_type
typedef struct genom_state_rusage genom_state_rusage;
#endif /* _genom_state_rusage_c_type */

#ifndef _genom_state_rusage_definition_c_type
# define _genom_state_rusage_definition_c_type
struct genom_state_rusage {
 uint32_t cycles;
 genom_state_stats timings;
 genom_state_stats load;
};
#endif /* _genom_state_rusage_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_activity_c_type
# define _genom_state_activity_c_type
typedef struct genom_state_activity genom_state_activity;
#endif /* _genom_state_activity_c_type */

#ifndef _genom_state_activity_definition_c_type
# define _genom_state_activity_definition_c_type
struct genom_state_activity {
 uint32_t id;
 char name[64];
};
#endif /* _genom_state_activity_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_task_c_type
# define _genom_state_task_c_type
typedef struct genom_state_task genom_state_task;
#endif /* _genom_state_task_c_type */

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#ifndef _genom_state_task_definition_c_type
# define _genom_state_task_definition_c_type
struct genom_state_task {
 char name[64];
 genom_state_rusage rusage;
 sequence_genom_state_activity activity;
};
#endif /* _genom_state_task_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */




#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_component_c_type
# define _genom_state_component_c_type
typedef struct genom_state_component genom_state_component;
#endif /* _genom_state_component_c_type */

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task *_buffer;
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */

#ifndef _genom_state_component_definition_c_type
# define _genom_state_component_definition_c_type
struct genom_state_component {
 sequence_genom_state_task task;
 char digest[33];
 char date[31];
 char version[32];
};
#endif /* _genom_state_component_definition_c_type */


#include <stdint.h>

#ifndef _or_time_ts_c_type
# define _or_time_ts_c_type
typedef struct or_time_ts or_time_ts;
#endif /* _or_time_ts_c_type */

#ifndef _or_time_ts_definition_c_type
# define _or_time_ts_definition_c_type
struct or_time_ts {
 int32_t sec;
 int32_t nsec;
};
#endif /* _or_time_ts_definition_c_type */




#ifndef _or_t3d_pos_c_type
# define _or_t3d_pos_c_type
typedef struct or_t3d_pos or_t3d_pos;
#endif /* _or_t3d_pos_c_type */

#ifndef _or_t3d_pos_definition_c_type
# define _or_t3d_pos_definition_c_type
struct or_t3d_pos {
 double x;
 double y;
 double z;
};
#endif /* _or_t3d_pos_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */


#ifndef _or_t3d_att_c_type
# define _or_t3d_att_c_type
typedef struct or_t3d_att or_t3d_att;
#endif /* _or_t3d_att_c_type */

#ifndef _or_t3d_att_definition_c_type
# define _or_t3d_att_definition_c_type
struct or_t3d_att {
 double qw;
 double qx;
 double qy;
 double qz;
};
#endif /* _or_t3d_att_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */


#ifndef _or_t3d_vel_c_type
# define _or_t3d_vel_c_type
typedef struct or_t3d_vel or_t3d_vel;
#endif /* _or_t3d_vel_c_type */

#ifndef _or_t3d_vel_definition_c_type
# define _or_t3d_vel_definition_c_type
struct or_t3d_vel {
 double vx;
 double vy;
 double vz;
};
#endif /* _or_t3d_vel_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */


#ifndef _or_t3d_avel_c_type
# define _or_t3d_avel_c_type
typedef struct or_t3d_avel or_t3d_avel;
#endif /* _or_t3d_avel_c_type */

#ifndef _or_t3d_avel_definition_c_type
# define _or_t3d_avel_definition_c_type
struct or_t3d_avel {
 double wx;
 double wy;
 double wz;
};
#endif /* _or_t3d_avel_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */


#ifndef _or_t3d_acc_c_type
# define _or_t3d_acc_c_type
typedef struct or_t3d_acc or_t3d_acc;
#endif /* _or_t3d_acc_c_type */

#ifndef _or_t3d_acc_definition_c_type
# define _or_t3d_acc_definition_c_type
struct or_t3d_acc {
 double ax;
 double ay;
 double az;
};
#endif /* _or_t3d_acc_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */


#ifndef _or_t3d_aacc_c_type
# define _or_t3d_aacc_c_type
typedef struct or_t3d_aacc or_t3d_aacc;
#endif /* _or_t3d_aacc_c_type */

#ifndef _or_t3d_aacc_definition_c_type
# define _or_t3d_aacc_definition_c_type
struct or_t3d_aacc {
 double awx;
 double awy;
 double awz;
};
#endif /* _or_t3d_aacc_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */



#ifndef _or_t3d_pos_cov_c_type
# define _or_t3d_pos_cov_c_type
typedef struct or_t3d_pos_cov or_t3d_pos_cov;
#endif /* _or_t3d_pos_cov_c_type */

#ifndef _or_t3d_pos_cov_definition_c_type
# define _or_t3d_pos_cov_definition_c_type
struct or_t3d_pos_cov {
 double cov[6];
};
#endif /* _or_t3d_pos_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */



#ifndef _or_t3d_att_cov_c_type
# define _or_t3d_att_cov_c_type
typedef struct or_t3d_att_cov or_t3d_att_cov;
#endif /* _or_t3d_att_cov_c_type */

#ifndef _or_t3d_att_cov_definition_c_type
# define _or_t3d_att_cov_definition_c_type
struct or_t3d_att_cov {
 double cov[10];
};
#endif /* _or_t3d_att_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_cov_c_type
# define _optional_or_t3d_att_cov_c_type
typedef struct optional_or_t3d_att_cov {
  bool _present;
  or_t3d_att_cov _value;
} optional_or_t3d_att_cov;
#endif /* _optional_or_t3d_att_cov_c_type */



#ifndef _or_t3d_att_pos_cov_c_type
# define _or_t3d_att_pos_cov_c_type
typedef struct or_t3d_att_pos_cov or_t3d_att_pos_cov;
#endif /* _or_t3d_att_pos_cov_c_type */

#ifndef _or_t3d_att_pos_cov_definition_c_type
# define _or_t3d_att_pos_cov_definition_c_type
struct or_t3d_att_pos_cov {
 double cov[12];
};
#endif /* _or_t3d_att_pos_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_att_pos_cov_c_type
# define _optional_or_t3d_att_pos_cov_c_type
typedef struct optional_or_t3d_att_pos_cov {
  bool _present;
  or_t3d_att_pos_cov _value;
} optional_or_t3d_att_pos_cov;
#endif /* _optional_or_t3d_att_pos_cov_c_type */


#ifndef _or_t3d_vel_cov_c_type
# define _or_t3d_vel_cov_c_type
typedef struct or_t3d_vel_cov or_t3d_vel_cov;
#endif /* _or_t3d_vel_cov_c_type */

#ifndef _or_t3d_vel_cov_definition_c_type
# define _or_t3d_vel_cov_definition_c_type
struct or_t3d_vel_cov {
 double cov[6];
};
#endif /* _or_t3d_vel_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */


#ifndef _or_t3d_avel_cov_c_type
# define _or_t3d_avel_cov_c_type
typedef struct or_t3d_avel_cov or_t3d_avel_cov;
#endif /* _or_t3d_avel_cov_c_type */

#ifndef _or_t3d_avel_cov_definition_c_type
# define _or_t3d_avel_cov_definition_c_type
struct or_t3d_avel_cov {
 double cov[6];
};
#endif /* _or_t3d_avel_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_avel_cov_c_type
# define _optional_or_t3d_avel_cov_c_type
typedef struct optional_or_t3d_avel_cov {
  bool _present;
  or_t3d_avel_cov _value;
} optional_or_t3d_avel_cov;
#endif /* _optional_or_t3d_avel_cov_c_type */


#ifndef _or_t3d_acc_cov_c_type
# define _or_t3d_acc_cov_c_type
typedef struct or_t3d_acc_cov or_t3d_acc_cov;
#endif /* _or_t3d_acc_cov_c_type */

#ifndef _or_t3d_acc_cov_definition_c_type
# define _or_t3d_acc_cov_definition_c_type
struct or_t3d_acc_cov {
 double cov[6];
};
#endif /* _or_t3d_acc_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */


#ifndef _or_t3d_aacc_cov_c_type
# define _or_t3d_aacc_cov_c_type
typedef struct or_t3d_aacc_cov or_t3d_aacc_cov;
#endif /* _or_t3d_aacc_cov_c_type */

#ifndef _or_t3d_aacc_cov_definition_c_type
# define _or_t3d_aacc_cov_definition_c_type
struct or_t3d_aacc_cov {
 double cov[6];
};
#endif /* _or_t3d_aacc_cov_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_aacc_cov_c_type
# define _optional_or_t3d_aacc_cov_c_type
typedef struct optional_or_t3d_aacc_cov {
  bool _present;
  or_t3d_aacc_cov _value;
} optional_or_t3d_aacc_cov;
#endif /* _optional_or_t3d_aacc_cov_c_type */

#include <stdbool.h>

#ifndef _or_pose_estimator_state_c_type
# define _or_pose_estimator_state_c_type
typedef struct or_pose_estimator_state or_pose_estimator_state;
#endif /* _or_pose_estimator_state_c_type */

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */

#ifndef _optional_or_t3d_att_cov_c_type
# define _optional_or_t3d_att_cov_c_type
typedef struct optional_or_t3d_att_cov {
  bool _present;
  or_t3d_att_cov _value;
} optional_or_t3d_att_cov;
#endif /* _optional_or_t3d_att_cov_c_type */

#ifndef _optional_or_t3d_att_pos_cov_c_type
# define _optional_or_t3d_att_pos_cov_c_type
typedef struct optional_or_t3d_att_pos_cov {
  bool _present;
  or_t3d_att_pos_cov _value;
} optional_or_t3d_att_pos_cov;
#endif /* _optional_or_t3d_att_pos_cov_c_type */

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */

#ifndef _optional_or_t3d_avel_cov_c_type
# define _optional_or_t3d_avel_cov_c_type
typedef struct optional_or_t3d_avel_cov {
  bool _present;
  or_t3d_avel_cov _value;
} optional_or_t3d_avel_cov;
#endif /* _optional_or_t3d_avel_cov_c_type */

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */

#ifndef _optional_or_t3d_aacc_cov_c_type
# define _optional_or_t3d_aacc_cov_c_type
typedef struct optional_or_t3d_aacc_cov {
  bool _present;
  or_t3d_aacc_cov _value;
} optional_or_t3d_aacc_cov;
#endif /* _optional_or_t3d_aacc_cov_c_type */

#ifndef _or_pose_estimator_state_definition_c_type
# define _or_pose_estimator_state_definition_c_type
struct or_pose_estimator_state {
 or_time_ts ts;
 bool intrinsic;
 optional_or_t3d_pos pos;
 optional_or_t3d_att att;
 optional_or_t3d_vel vel;
 optional_or_t3d_avel avel;
 optional_or_t3d_acc acc;
 optional_or_t3d_aacc aacc;
 optional_or_t3d_pos_cov pos_cov;
 optional_or_t3d_att_cov att_cov;
 optional_or_t3d_att_pos_cov att_pos_cov;
 optional_or_t3d_vel_cov vel_cov;
 optional_or_t3d_avel_cov avel_cov;
 optional_or_t3d_acc_cov acc_cov;
 optional_or_t3d_aacc_cov aacc_cov;
};
#endif /* _or_pose_estimator_state_definition_c_type */


#ifndef _or_t3d_jerk_c_type
# define _or_t3d_jerk_c_type
typedef struct or_t3d_jerk or_t3d_jerk;
#endif /* _or_t3d_jerk_c_type */

#ifndef _or_t3d_jerk_definition_c_type
# define _or_t3d_jerk_definition_c_type
struct or_t3d_jerk {
 double jx;
 double jy;
 double jz;
};
#endif /* _or_t3d_jerk_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_jerk_c_type
# define _optional_or_t3d_jerk_c_type
typedef struct optional_or_t3d_jerk {
  bool _present;
  or_t3d_jerk _value;
} optional_or_t3d_jerk;
#endif /* _optional_or_t3d_jerk_c_type */


#ifndef _or_t3d_snap_c_type
# define _or_t3d_snap_c_type
typedef struct or_t3d_snap or_t3d_snap;
#endif /* _or_t3d_snap_c_type */

#ifndef _or_t3d_snap_definition_c_type
# define _or_t3d_snap_definition_c_type
struct or_t3d_snap {
 double sx;
 double sy;
 double sz;
};
#endif /* _or_t3d_snap_definition_c_type */

#include <stdbool.h>

#ifndef _optional_or_t3d_snap_c_type
# define _optional_or_t3d_snap_c_type
typedef struct optional_or_t3d_snap {
  bool _present;
  or_t3d_snap _value;
} optional_or_t3d_snap;
#endif /* _optional_or_t3d_snap_c_type */

#include <stdbool.h>

#ifndef _or_rigid_body_state_c_type
# define _or_rigid_body_state_c_type
typedef struct or_rigid_body_state or_rigid_body_state;
#endif /* _or_rigid_body_state_c_type */

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */

#ifndef _optional_or_t3d_att_c_type
# define _optional_or_t3d_att_c_type
typedef struct optional_or_t3d_att {
  bool _present;
  or_t3d_att _value;
} optional_or_t3d_att;
#endif /* _optional_or_t3d_att_c_type */

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */

#ifndef _optional_or_t3d_avel_c_type
# define _optional_or_t3d_avel_c_type
typedef struct optional_or_t3d_avel {
  bool _present;
  or_t3d_avel _value;
} optional_or_t3d_avel;
#endif /* _optional_or_t3d_avel_c_type */

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */

#ifndef _optional_or_t3d_aacc_c_type
# define _optional_or_t3d_aacc_c_type
typedef struct optional_or_t3d_aacc {
  bool _present;
  or_t3d_aacc _value;
} optional_or_t3d_aacc;
#endif /* _optional_or_t3d_aacc_c_type */

#ifndef _optional_or_t3d_jerk_c_type
# define _optional_or_t3d_jerk_c_type
typedef struct optional_or_t3d_jerk {
  bool _present;
  or_t3d_jerk _value;
} optional_or_t3d_jerk;
#endif /* _optional_or_t3d_jerk_c_type */

#ifndef _optional_or_t3d_snap_c_type
# define _optional_or_t3d_snap_c_type
typedef struct optional_or_t3d_snap {
  bool _present;
  or_t3d_snap _value;
} optional_or_t3d_snap;
#endif /* _optional_or_t3d_snap_c_type */

#ifndef _or_rigid_body_state_definition_c_type
# define _or_rigid_body_state_definition_c_type
struct or_rigid_body_state {
 or_time_ts ts;
 bool intrinsic;
 optional_or_t3d_pos pos;
 optional_or_t3d_att att;
 optional_or_t3d_vel vel;
 optional_or_t3d_avel avel;
 optional_or_t3d_acc acc;
 optional_or_t3d_aacc aacc;
 optional_or_t3d_jerk jerk;
 optional_or_t3d_snap snap;
};
#endif /* _or_rigid_body_state_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_or_rigid_body_state_c_type
# define _sequence_or_rigid_body_state_c_type
typedef struct sequence_or_rigid_body_state {
  uint32_t _maximum, _length;
  or_rigid_body_state *_buffer;
  void (*_release)(void *_buffer);
} sequence_or_rigid_body_state;
#endif /* _sequence_or_rigid_body_state_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_or_rigid_body_state_c_type
# define _sequence_or_rigid_body_state_c_type
typedef struct sequence_or_rigid_body_state {
  uint32_t _maximum, _length;
  or_rigid_body_state *_buffer;
  void (*_release)(void *_buffer);
} sequence_or_rigid_body_state;
#endif /* _sequence_or_rigid_body_state_c_type */

#ifndef _or_rigid_body_trajectory_c_type
# define _or_rigid_body_trajectory_c_type
typedef sequence_or_rigid_body_state or_rigid_body_trajectory;
#endif /* _or_rigid_body_trajectory_c_type */


#ifndef _genom_incompatible_digest_client_digest_c_type
# define _genom_incompatible_digest_client_digest_c_type
typedef struct genom_incompatible_digest_client_digest genom_incompatible_digest_client_digest;
#endif /* _genom_incompatible_digest_client_digest_c_type */

#ifndef _genom_incompatible_digest_client_digest_definition_c_type
# define _genom_incompatible_digest_client_digest_definition_c_type
struct genom_incompatible_digest_client_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_client_digest_definition_c_type */


#ifndef _genom_incompatible_digest_server_digest_c_type
# define _genom_incompatible_digest_server_digest_c_type
typedef struct genom_incompatible_digest_server_digest genom_incompatible_digest_server_digest;
#endif /* _genom_incompatible_digest_server_digest_c_type */

#ifndef _genom_incompatible_digest_server_digest_definition_c_type
# define _genom_incompatible_digest_server_digest_definition_c_type
struct genom_incompatible_digest_server_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_server_digest_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_incompatible_digest_c_type
# define _genom_incompatible_digest_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_incompatible_digest_id[] = "::genom::incompatible_digest";
typedef struct genom_incompatible_digest_detail genom_incompatible_digest_detail;
#endif /* _genom_incompatible_digest_c_type */

#ifndef _genom_incompatible_digest_definition_c_type
# define _genom_incompatible_digest_definition_c_type
struct genom_incompatible_digest_detail {
 genom_incompatible_digest_client_digest client;
 genom_incompatible_digest_server_digest server;
};
static inline genom_event
genom_incompatible_digest(genom_incompatible_digest_detail *d, genom_context self) {
 return self->raise(genom_incompatible_digest_id, d, sizeof(*d), self);
}
#endif /* _genom_incompatible_digest_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_bad_transition_c_type
# define _genom_bad_transition_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_bad_transition_id[] = "::genom::bad_transition";
typedef struct genom_bad_transition_detail genom_bad_transition_detail;
#endif /* _genom_bad_transition_c_type */

#ifndef _genom_bad_transition_definition_c_type
# define _genom_bad_transition_definition_c_type
struct genom_bad_transition_detail {
 char from[128];
 char to[128];
};
static inline genom_event
genom_bad_transition(genom_bad_transition_detail *d, genom_context self) {
 return self->raise(genom_bad_transition_id, d, sizeof(*d), self);
}
#endif /* _genom_bad_transition_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_interrupted_c_type
# define _genom_interrupted_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_interrupted_id[] = "::genom::interrupted";
typedef struct genom_interrupted_detail genom_interrupted_detail;
#endif /* _genom_interrupted_c_type */

#ifndef _genom_interrupted_definition_c_type
# define _genom_interrupted_definition_c_type
struct genom_interrupted_detail {
 char by[128];
};
static inline genom_event
genom_interrupted(genom_interrupted_detail *d, genom_context self) {
 return self->raise(genom_interrupted_id, d, sizeof(*d), self);
}
#endif /* _genom_interrupted_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_serialization_c_type
# define _genom_serialization_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_serialization_id[] = "::genom::serialization";
typedef void genom_serialization_detail;
#endif /* _genom_serialization_c_type */

#ifndef _genom_serialization_definition_c_type
# define _genom_serialization_definition_c_type
static inline genom_event
genom_serialization(genom_context self) {
 return self->raise(genom_serialization_id, NULL, 0, self);
}
#endif /* _genom_serialization_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_too_many_activities_c_type
# define _genom_too_many_activities_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_too_many_activities_id[] = "::genom::too_many_activities";
typedef void genom_too_many_activities_detail;
#endif /* _genom_too_many_activities_c_type */

#ifndef _genom_too_many_activities_definition_c_type
# define _genom_too_many_activities_definition_c_type
static inline genom_event
genom_too_many_activities(genom_context self) {
 return self->raise(genom_too_many_activities_id, NULL, 0, self);
}
#endif /* _genom_too_many_activities_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_disallowed_c_type
# define _genom_disallowed_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_disallowed_id[] = "::genom::disallowed";
typedef void genom_disallowed_detail;
#endif /* _genom_disallowed_c_type */

#ifndef _genom_disallowed_definition_c_type
# define _genom_disallowed_definition_c_type
static inline genom_event
genom_disallowed(genom_context self) {
 return self->raise(genom_disallowed_id, NULL, 0, self);
}
#endif /* _genom_disallowed_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_mwerr_c_type
# define _genom_mwerr_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_mwerr_id[] = "::genom::mwerr";
typedef struct genom_mwerr_detail genom_mwerr_detail;
#endif /* _genom_mwerr_c_type */

#ifndef _genom_mwerr_definition_c_type
# define _genom_mwerr_definition_c_type
struct genom_mwerr_detail {
 char what[256];
};
static inline genom_event
genom_mwerr(genom_mwerr_detail *d, genom_context self) {
 return self->raise(genom_mwerr_id, d, sizeof(*d), self);
}
#endif /* _genom_mwerr_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_activity_c_type
# define _genom_no_such_activity_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_activity_id[] = "::genom::no_such_activity";
typedef void genom_no_such_activity_detail;
#endif /* _genom_no_such_activity_c_type */

#ifndef _genom_no_such_activity_definition_c_type
# define _genom_no_such_activity_definition_c_type
static inline genom_event
genom_no_such_activity(genom_context self) {
 return self->raise(genom_no_such_activity_id, NULL, 0, self);
}
#endif /* _genom_no_such_activity_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_inport_c_type
# define _genom_no_such_inport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_inport_id[] = "::genom::no_such_inport";
typedef void genom_no_such_inport_detail;
#endif /* _genom_no_such_inport_c_type */

#ifndef _genom_no_such_inport_definition_c_type
# define _genom_no_such_inport_definition_c_type
static inline genom_event
genom_no_such_inport(genom_context self) {
 return self->raise(genom_no_such_inport_id, NULL, 0, self);
}
#endif /* _genom_no_such_inport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_outport_c_type
# define _genom_no_such_outport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_outport_id[] = "::genom::no_such_outport";
typedef void genom_no_such_outport_detail;
#endif /* _genom_no_such_outport_c_type */

#ifndef _genom_no_such_outport_definition_c_type
# define _genom_no_such_outport_definition_c_type
static inline genom_event
genom_no_such_outport(genom_context self) {
 return self->raise(genom_no_such_outport_id, NULL, 0, self);
}
#endif /* _genom_no_such_outport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_port_io_c_type
# define _genom_port_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_port_io_id[] = "::genom::port_io";
typedef void genom_port_io_detail;
#endif /* _genom_port_io_c_type */

#ifndef _genom_port_io_definition_c_type
# define _genom_port_io_definition_c_type
static inline genom_event
genom_port_io(genom_context self) {
 return self->raise(genom_port_io_id, NULL, 0, self);
}
#endif /* _genom_port_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_remote_c_type
# define _genom_no_such_remote_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_remote_id[] = "::genom::no_such_remote";
typedef void genom_no_such_remote_detail;
#endif /* _genom_no_such_remote_c_type */

#ifndef _genom_no_such_remote_definition_c_type
# define _genom_no_such_remote_definition_c_type
static inline genom_event
genom_no_such_remote(genom_context self) {
 return self->raise(genom_no_such_remote_id, NULL, 0, self);
}
#endif /* _genom_no_such_remote_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_service_c_type
# define _genom_no_such_service_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_service_id[] = "::genom::no_such_service";
typedef void genom_no_such_service_detail;
#endif /* _genom_no_such_service_c_type */

#ifndef _genom_no_such_service_definition_c_type
# define _genom_no_such_service_definition_c_type
static inline genom_event
genom_no_such_service(genom_context self) {
 return self->raise(genom_no_such_service_id, NULL, 0, self);
}
#endif /* _genom_no_such_service_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_remote_io_c_type
# define _genom_remote_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_remote_io_id[] = "::genom::remote_io";
typedef void genom_remote_io_detail;
#endif /* _genom_remote_io_c_type */

#ifndef _genom_remote_io_definition_c_type
# define _genom_remote_io_definition_c_type
static inline genom_event
genom_remote_io(genom_context self) {
 return self->raise(genom_remote_io_id, NULL, 0, self);
}
#endif /* _genom_remote_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _maneuver_e_limits_c_type
# define _maneuver_e_limits_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak maneuver_e_limits_id[] = "::maneuver::e_limits";
typedef void maneuver_e_limits_detail;
#endif /* _maneuver_e_limits_c_type */

#ifndef _maneuver_e_limits_definition_c_type
# define _maneuver_e_limits_definition_c_type
static inline genom_event
maneuver_e_limits(genom_context self) {
 return self->raise(maneuver_e_limits_id, NULL, 0, self);
}
#endif /* _maneuver_e_limits_definition_c_type */

#include "genom3/c/context.h"

#ifndef _maneuver_e_nostate_c_type
# define _maneuver_e_nostate_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak maneuver_e_nostate_id[] = "::maneuver::e_nostate";
typedef void maneuver_e_nostate_detail;
#endif /* _maneuver_e_nostate_c_type */

#ifndef _maneuver_e_nostate_definition_c_type
# define _maneuver_e_nostate_definition_c_type
static inline genom_event
maneuver_e_nostate(genom_context self) {
 return self->raise(maneuver_e_nostate_id, NULL, 0, self);
}
#endif /* _maneuver_e_nostate_definition_c_type */


#include <stdint.h>
#include "genom3/c/context.h"

#ifndef _maneuver_e_sys_c_type
# define _maneuver_e_sys_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak maneuver_e_sys_id[] = "::maneuver::e_sys";
typedef struct maneuver_e_sys_detail maneuver_e_sys_detail;
#endif /* _maneuver_e_sys_c_type */

#ifndef _maneuver_e_sys_definition_c_type
# define _maneuver_e_sys_definition_c_type
struct maneuver_e_sys_detail {
 int16_t code;
 char what[128];
};
static inline genom_event
maneuver_e_sys(maneuver_e_sys_detail *d, genom_context self) {
 return self->raise(maneuver_e_sys_id, d, sizeof(*d), self);
}
#endif /* _maneuver_e_sys_definition_c_type */



/* --- Service input and output structures --------------------------------- */


/* input of abort_activity */
struct genom_maneuver_abort_activity_input {
  uint32_t activity;
};

/* output of abort_activity */
struct genom_maneuver_abort_activity_output {
};


/* input of connect_port */
struct genom_maneuver_connect_port_input {
  char local[128];
  char remote[128];
};

/* output of connect_port */
struct genom_maneuver_connect_port_output {
};


/* input of connect_service */
struct genom_maneuver_connect_service_input {
  char local[128];
  char remote[128];
};

/* output of connect_service */
struct genom_maneuver_connect_service_output {
};


/* input of kill */
struct genom_maneuver_kill_input {
};

/* output of kill */
struct genom_maneuver_kill_output {
};


/* input of set_bounds */
struct genom_maneuver_set_bounds_input {
  double xmin;
  double xmax;
  double ymin;
  double ymax;
  double zmin;
  double zmax;
  double yawmin;
  double yawmax;
};

/* output of set_bounds */
struct genom_maneuver_set_bounds_output {
};


/* input of set_velocity_limit */
struct genom_maneuver_set_velocity_limit_input {
  double v;
  double w;
};

/* output of set_velocity_limit */
struct genom_maneuver_set_velocity_limit_output {
};


/* input of set_acceleration_limit */
struct genom_maneuver_set_acceleration_limit_input {
  double a;
  double dw;
};

/* output of set_acceleration_limit */
struct genom_maneuver_set_acceleration_limit_output {
};


/* input of set_jerk_limit */
struct genom_maneuver_set_jerk_limit_input {
  double j;
  double ddw;
};

/* output of set_jerk_limit */
struct genom_maneuver_set_jerk_limit_output {
};


/* input of set_snap_limit */
struct genom_maneuver_set_snap_limit_input {
  double s;
  double dddw;
};

/* output of set_snap_limit */
struct genom_maneuver_set_snap_limit_output {
};


/* input of get_limits */
struct genom_maneuver_get_limits_input {
};

/* output of get_limits */
struct genom_maneuver_get_limits_output {
  double xmin;
  double xmax;
  double ymin;
  double ymax;
  double zmin;
  double zmax;
  double yawmin;
  double yawmax;
  double v;
  double w;
  double a;
  double dw;
  double j;
  double ddw;
  double s;
  double dddw;
};


/* input of set_state */
struct genom_maneuver_set_state_input {
  double x;
  double y;
  double z;
  double yaw;
};

/* output of set_state */
struct genom_maneuver_set_state_output {
};


/* input of set_current_state */
struct genom_maneuver_set_current_state_input {
};

/* output of set_current_state */
struct genom_maneuver_set_current_state_output {
};


/* input of take_off */
struct genom_maneuver_take_off_input {
  double height;
  double duration;
};

/* output of take_off */
struct genom_maneuver_take_off_output {
};


/* input of goto */
struct genom_maneuver_goto_input {
  double x;
  double y;
  double z;
  double yaw;
  double duration;
};

/* output of goto */
struct genom_maneuver_goto_output {
};


/* input of waypoint */
struct genom_maneuver_waypoint_input {
  double x;
  double y;
  double z;
  double yaw;
  double vx;
  double vy;
  double vz;
  double wz;
  double ax;
  double ay;
  double az;
  double duration;
};

/* output of waypoint */
struct genom_maneuver_waypoint_output {
};


/* input of velocity */
struct genom_maneuver_velocity_input {
  double vx;
  double vy;
  double vz;
  double wz;
  double ax;
  double ay;
  double az;
  double duration;
};

/* output of velocity */
struct genom_maneuver_velocity_output {
};


/* input of replay */
struct genom_maneuver_replay_input {
  char filename[128];
};

/* output of replay */
struct genom_maneuver_replay_output {
};


/* input of wait */
struct genom_maneuver_wait_input {
};

/* output of wait */
struct genom_maneuver_wait_output {
};


/* input of stop */
struct genom_maneuver_stop_input {
};

/* output of stop */
struct genom_maneuver_stop_output {
};


/* input of get_reference */
struct genom_maneuver_get_reference_input {
};

/* output of get_reference */
struct genom_maneuver_get_reference_output {
  or_rigid_body_state reference;
};


/* input of set_horizon */
struct genom_maneuver_set_horizon_input {
  double horizon;
  uint32_t samples;
};

/* output of set_horizon */
struct genom_maneuver_set_horizon_output {
  double horizon;
  uint32_t samples;
};


/* input of log */
struct genom_maneuver_log_input {
  char path[64];
  uint32_t decimation;
};

/* output of log */
struct genom_maneuver_log_output {
};


/* input of log_stop */
struct genom_maneuver_log_stop_input {
};

/* output of log_stop */
struct genom_maneuver_log_stop_output {
};


/* input of log_info */
struct genom_maneuver_log_info_input {
};

/* output of log_info */
struct genom_maneuver_log_info_output {
  uint32_t miss;
  uint32_t total;
};



#ifdef __cplusplus
extern "C" {
#endif

/* --- Services ------------------------------------------------------------ */

genom_client		genom_maneuver_client_init(int argc, char *argv[],
                                genom_event *ex, const void **exdetail);
void			genom_maneuver_client_fini(genom_client h);
genom_context		genom_maneuver_client_context(genom_client h);
const char *		genom_maneuver_client_instance(genom_client h);
int			genom_maneuver_client_eventfd(genom_client h);
const struct genom_service_info *
			genom_maneuver_client_service_info(genom_client h,
				int rqstid);
int			genom_maneuver_client_done(genom_client h, int rqstid);
genom_event		genom_maneuver_client_wait(genom_client h, int rqstid);
genom_event		genom_maneuver_client_clean(genom_client h,
				int rqstid);
genom_event		genom_maneuver_client_abort(genom_client h,
                                int rqstid);
genom_event		genom_maneuver_client_doevents(genom_client h);
char *			genom_maneuver_client_json_error(genom_client h,
				genom_event e, const void *detail);

/* abort_activity */
typedef void (*maneuver_abort_activity_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_abort_activity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_abort_activity_rqst(
  genom_client h,
  const struct genom_maneuver_abort_activity_input *in,
  maneuver_abort_activity_cb sentcb, maneuver_abort_activity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_abort_activity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_abort_activity_output **out,
  void **exdetail);

void	genom_maneuver_client_abort_activity_init_input(
  struct genom_maneuver_abort_activity_input *input);
void	genom_maneuver_client_abort_activity_init_output(
  struct genom_maneuver_abort_activity_output *output);
void	genom_maneuver_client_abort_activity_fini_input(
  struct genom_maneuver_abort_activity_input *input);
void	genom_maneuver_client_abort_activity_fini_output(
  struct genom_maneuver_abort_activity_output *output);

int	genom_maneuver_client_abort_activity_json_scan(
  struct genom_maneuver_abort_activity_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_abort_activity_json_print(
  char **json, const struct genom_maneuver_abort_activity_output *out);

/* connect_port */
typedef void (*maneuver_connect_port_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_connect_port_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_connect_port_rqst(
  genom_client h,
  const struct genom_maneuver_connect_port_input *in,
  maneuver_connect_port_cb sentcb, maneuver_connect_port_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_connect_port_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_connect_port_output **out,
  void **exdetail);

void	genom_maneuver_client_connect_port_init_input(
  struct genom_maneuver_connect_port_input *input);
void	genom_maneuver_client_connect_port_init_output(
  struct genom_maneuver_connect_port_output *output);
void	genom_maneuver_client_connect_port_fini_input(
  struct genom_maneuver_connect_port_input *input);
void	genom_maneuver_client_connect_port_fini_output(
  struct genom_maneuver_connect_port_output *output);

int	genom_maneuver_client_connect_port_json_scan(
  struct genom_maneuver_connect_port_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_connect_port_json_print(
  char **json, const struct genom_maneuver_connect_port_output *out);

/* connect_service */
typedef void (*maneuver_connect_service_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_connect_service_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_connect_service_rqst(
  genom_client h,
  const struct genom_maneuver_connect_service_input *in,
  maneuver_connect_service_cb sentcb, maneuver_connect_service_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_connect_service_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_connect_service_output **out,
  void **exdetail);

void	genom_maneuver_client_connect_service_init_input(
  struct genom_maneuver_connect_service_input *input);
void	genom_maneuver_client_connect_service_init_output(
  struct genom_maneuver_connect_service_output *output);
void	genom_maneuver_client_connect_service_fini_input(
  struct genom_maneuver_connect_service_input *input);
void	genom_maneuver_client_connect_service_fini_output(
  struct genom_maneuver_connect_service_output *output);

int	genom_maneuver_client_connect_service_json_scan(
  struct genom_maneuver_connect_service_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_connect_service_json_print(
  char **json, const struct genom_maneuver_connect_service_output *out);

/* kill */
typedef void (*maneuver_kill_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_kill_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_kill_rqst(
  genom_client h,
  const struct genom_maneuver_kill_input *in,
  maneuver_kill_cb sentcb, maneuver_kill_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_kill_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_kill_output **out,
  void **exdetail);

void	genom_maneuver_client_kill_init_input(
  struct genom_maneuver_kill_input *input);
void	genom_maneuver_client_kill_init_output(
  struct genom_maneuver_kill_output *output);
void	genom_maneuver_client_kill_fini_input(
  struct genom_maneuver_kill_input *input);
void	genom_maneuver_client_kill_fini_output(
  struct genom_maneuver_kill_output *output);

int	genom_maneuver_client_kill_json_scan(
  struct genom_maneuver_kill_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_kill_json_print(
  char **json, const struct genom_maneuver_kill_output *out);

/* set_bounds */
typedef void (*maneuver_set_bounds_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_bounds_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_bounds_rqst(
  genom_client h,
  const struct genom_maneuver_set_bounds_input *in,
  maneuver_set_bounds_cb sentcb, maneuver_set_bounds_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_bounds_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_bounds_output **out,
  void **exdetail);

void	genom_maneuver_client_set_bounds_init_input(
  struct genom_maneuver_set_bounds_input *input);
void	genom_maneuver_client_set_bounds_init_output(
  struct genom_maneuver_set_bounds_output *output);
void	genom_maneuver_client_set_bounds_fini_input(
  struct genom_maneuver_set_bounds_input *input);
void	genom_maneuver_client_set_bounds_fini_output(
  struct genom_maneuver_set_bounds_output *output);

int	genom_maneuver_client_set_bounds_json_scan(
  struct genom_maneuver_set_bounds_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_bounds_json_print(
  char **json, const struct genom_maneuver_set_bounds_output *out);

/* set_velocity_limit */
typedef void (*maneuver_set_velocity_limit_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_velocity_limit_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_velocity_limit_rqst(
  genom_client h,
  const struct genom_maneuver_set_velocity_limit_input *in,
  maneuver_set_velocity_limit_cb sentcb, maneuver_set_velocity_limit_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_velocity_limit_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_velocity_limit_output **out,
  void **exdetail);

void	genom_maneuver_client_set_velocity_limit_init_input(
  struct genom_maneuver_set_velocity_limit_input *input);
void	genom_maneuver_client_set_velocity_limit_init_output(
  struct genom_maneuver_set_velocity_limit_output *output);
void	genom_maneuver_client_set_velocity_limit_fini_input(
  struct genom_maneuver_set_velocity_limit_input *input);
void	genom_maneuver_client_set_velocity_limit_fini_output(
  struct genom_maneuver_set_velocity_limit_output *output);

int	genom_maneuver_client_set_velocity_limit_json_scan(
  struct genom_maneuver_set_velocity_limit_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_velocity_limit_json_print(
  char **json, const struct genom_maneuver_set_velocity_limit_output *out);

/* set_acceleration_limit */
typedef void (*maneuver_set_acceleration_limit_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_acceleration_limit_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_acceleration_limit_rqst(
  genom_client h,
  const struct genom_maneuver_set_acceleration_limit_input *in,
  maneuver_set_acceleration_limit_cb sentcb, maneuver_set_acceleration_limit_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_acceleration_limit_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_acceleration_limit_output **out,
  void **exdetail);

void	genom_maneuver_client_set_acceleration_limit_init_input(
  struct genom_maneuver_set_acceleration_limit_input *input);
void	genom_maneuver_client_set_acceleration_limit_init_output(
  struct genom_maneuver_set_acceleration_limit_output *output);
void	genom_maneuver_client_set_acceleration_limit_fini_input(
  struct genom_maneuver_set_acceleration_limit_input *input);
void	genom_maneuver_client_set_acceleration_limit_fini_output(
  struct genom_maneuver_set_acceleration_limit_output *output);

int	genom_maneuver_client_set_acceleration_limit_json_scan(
  struct genom_maneuver_set_acceleration_limit_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_acceleration_limit_json_print(
  char **json, const struct genom_maneuver_set_acceleration_limit_output *out);

/* set_jerk_limit */
typedef void (*maneuver_set_jerk_limit_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_jerk_limit_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_jerk_limit_rqst(
  genom_client h,
  const struct genom_maneuver_set_jerk_limit_input *in,
  maneuver_set_jerk_limit_cb sentcb, maneuver_set_jerk_limit_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_jerk_limit_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_jerk_limit_output **out,
  void **exdetail);

void	genom_maneuver_client_set_jerk_limit_init_input(
  struct genom_maneuver_set_jerk_limit_input *input);
void	genom_maneuver_client_set_jerk_limit_init_output(
  struct genom_maneuver_set_jerk_limit_output *output);
void	genom_maneuver_client_set_jerk_limit_fini_input(
  struct genom_maneuver_set_jerk_limit_input *input);
void	genom_maneuver_client_set_jerk_limit_fini_output(
  struct genom_maneuver_set_jerk_limit_output *output);

int	genom_maneuver_client_set_jerk_limit_json_scan(
  struct genom_maneuver_set_jerk_limit_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_jerk_limit_json_print(
  char **json, const struct genom_maneuver_set_jerk_limit_output *out);

/* set_snap_limit */
typedef void (*maneuver_set_snap_limit_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_snap_limit_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_snap_limit_rqst(
  genom_client h,
  const struct genom_maneuver_set_snap_limit_input *in,
  maneuver_set_snap_limit_cb sentcb, maneuver_set_snap_limit_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_snap_limit_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_snap_limit_output **out,
  void **exdetail);

void	genom_maneuver_client_set_snap_limit_init_input(
  struct genom_maneuver_set_snap_limit_input *input);
void	genom_maneuver_client_set_snap_limit_init_output(
  struct genom_maneuver_set_snap_limit_output *output);
void	genom_maneuver_client_set_snap_limit_fini_input(
  struct genom_maneuver_set_snap_limit_input *input);
void	genom_maneuver_client_set_snap_limit_fini_output(
  struct genom_maneuver_set_snap_limit_output *output);

int	genom_maneuver_client_set_snap_limit_json_scan(
  struct genom_maneuver_set_snap_limit_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_snap_limit_json_print(
  char **json, const struct genom_maneuver_set_snap_limit_output *out);

/* get_limits */
typedef void (*maneuver_get_limits_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_get_limits_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_get_limits_rqst(
  genom_client h,
  const struct genom_maneuver_get_limits_input *in,
  maneuver_get_limits_cb sentcb, maneuver_get_limits_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_get_limits_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_get_limits_output **out,
  void **exdetail);

void	genom_maneuver_client_get_limits_init_input(
  struct genom_maneuver_get_limits_input *input);
void	genom_maneuver_client_get_limits_init_output(
  struct genom_maneuver_get_limits_output *output);
void	genom_maneuver_client_get_limits_fini_input(
  struct genom_maneuver_get_limits_input *input);
void	genom_maneuver_client_get_limits_fini_output(
  struct genom_maneuver_get_limits_output *output);

int	genom_maneuver_client_get_limits_json_scan(
  struct genom_maneuver_get_limits_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_get_limits_json_print(
  char **json, const struct genom_maneuver_get_limits_output *out);

/* set_state */
typedef void (*maneuver_set_state_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_state_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_state_rqst(
  genom_client h,
  const struct genom_maneuver_set_state_input *in,
  maneuver_set_state_cb sentcb, maneuver_set_state_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_state_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_state_output **out,
  void **exdetail);

void	genom_maneuver_client_set_state_init_input(
  struct genom_maneuver_set_state_input *input);
void	genom_maneuver_client_set_state_init_output(
  struct genom_maneuver_set_state_output *output);
void	genom_maneuver_client_set_state_fini_input(
  struct genom_maneuver_set_state_input *input);
void	genom_maneuver_client_set_state_fini_output(
  struct genom_maneuver_set_state_output *output);

int	genom_maneuver_client_set_state_json_scan(
  struct genom_maneuver_set_state_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_state_json_print(
  char **json, const struct genom_maneuver_set_state_output *out);

/* set_current_state */
typedef void (*maneuver_set_current_state_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_current_state_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_current_state_rqst(
  genom_client h,
  const struct genom_maneuver_set_current_state_input *in,
  maneuver_set_current_state_cb sentcb, maneuver_set_current_state_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_current_state_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_current_state_output **out,
  void **exdetail);

void	genom_maneuver_client_set_current_state_init_input(
  struct genom_maneuver_set_current_state_input *input);
void	genom_maneuver_client_set_current_state_init_output(
  struct genom_maneuver_set_current_state_output *output);
void	genom_maneuver_client_set_current_state_fini_input(
  struct genom_maneuver_set_current_state_input *input);
void	genom_maneuver_client_set_current_state_fini_output(
  struct genom_maneuver_set_current_state_output *output);

int	genom_maneuver_client_set_current_state_json_scan(
  struct genom_maneuver_set_current_state_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_current_state_json_print(
  char **json, const struct genom_maneuver_set_current_state_output *out);

/* take_off */
typedef void (*maneuver_take_off_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_take_off_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_take_off_rqst(
  genom_client h,
  const struct genom_maneuver_take_off_input *in,
  maneuver_take_off_cb sentcb, maneuver_take_off_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_take_off_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_take_off_output **out,
  void **exdetail);

void	genom_maneuver_client_take_off_init_input(
  struct genom_maneuver_take_off_input *input);
void	genom_maneuver_client_take_off_init_output(
  struct genom_maneuver_take_off_output *output);
void	genom_maneuver_client_take_off_fini_input(
  struct genom_maneuver_take_off_input *input);
void	genom_maneuver_client_take_off_fini_output(
  struct genom_maneuver_take_off_output *output);

int	genom_maneuver_client_take_off_json_scan(
  struct genom_maneuver_take_off_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_take_off_json_print(
  char **json, const struct genom_maneuver_take_off_output *out);

/* goto */
typedef void (*maneuver_goto_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_goto_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_goto_rqst(
  genom_client h,
  const struct genom_maneuver_goto_input *in,
  maneuver_goto_cb sentcb, maneuver_goto_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_goto_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_goto_output **out,
  void **exdetail);

void	genom_maneuver_client_goto_init_input(
  struct genom_maneuver_goto_input *input);
void	genom_maneuver_client_goto_init_output(
  struct genom_maneuver_goto_output *output);
void	genom_maneuver_client_goto_fini_input(
  struct genom_maneuver_goto_input *input);
void	genom_maneuver_client_goto_fini_output(
  struct genom_maneuver_goto_output *output);

int	genom_maneuver_client_goto_json_scan(
  struct genom_maneuver_goto_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_goto_json_print(
  char **json, const struct genom_maneuver_goto_output *out);

/* waypoint */
typedef void (*maneuver_waypoint_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_waypoint_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_waypoint_rqst(
  genom_client h,
  const struct genom_maneuver_waypoint_input *in,
  maneuver_waypoint_cb sentcb, maneuver_waypoint_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_waypoint_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_waypoint_output **out,
  void **exdetail);

void	genom_maneuver_client_waypoint_init_input(
  struct genom_maneuver_waypoint_input *input);
void	genom_maneuver_client_waypoint_init_output(
  struct genom_maneuver_waypoint_output *output);
void	genom_maneuver_client_waypoint_fini_input(
  struct genom_maneuver_waypoint_input *input);
void	genom_maneuver_client_waypoint_fini_output(
  struct genom_maneuver_waypoint_output *output);

int	genom_maneuver_client_waypoint_json_scan(
  struct genom_maneuver_waypoint_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_waypoint_json_print(
  char **json, const struct genom_maneuver_waypoint_output *out);

/* velocity */
typedef void (*maneuver_velocity_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_velocity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_velocity_rqst(
  genom_client h,
  const struct genom_maneuver_velocity_input *in,
  maneuver_velocity_cb sentcb, maneuver_velocity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_velocity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_velocity_output **out,
  void **exdetail);

void	genom_maneuver_client_velocity_init_input(
  struct genom_maneuver_velocity_input *input);
void	genom_maneuver_client_velocity_init_output(
  struct genom_maneuver_velocity_output *output);
void	genom_maneuver_client_velocity_fini_input(
  struct genom_maneuver_velocity_input *input);
void	genom_maneuver_client_velocity_fini_output(
  struct genom_maneuver_velocity_output *output);

int	genom_maneuver_client_velocity_json_scan(
  struct genom_maneuver_velocity_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_velocity_json_print(
  char **json, const struct genom_maneuver_velocity_output *out);

/* replay */
typedef void (*maneuver_replay_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_replay_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_replay_rqst(
  genom_client h,
  const struct genom_maneuver_replay_input *in,
  maneuver_replay_cb sentcb, maneuver_replay_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_replay_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_replay_output **out,
  void **exdetail);

void	genom_maneuver_client_replay_init_input(
  struct genom_maneuver_replay_input *input);
void	genom_maneuver_client_replay_init_output(
  struct genom_maneuver_replay_output *output);
void	genom_maneuver_client_replay_fini_input(
  struct genom_maneuver_replay_input *input);
void	genom_maneuver_client_replay_fini_output(
  struct genom_maneuver_replay_output *output);

int	genom_maneuver_client_replay_json_scan(
  struct genom_maneuver_replay_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_replay_json_print(
  char **json, const struct genom_maneuver_replay_output *out);

/* wait */
typedef void (*maneuver_wait_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_wait_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_wait_rqst(
  genom_client h,
  const struct genom_maneuver_wait_input *in,
  maneuver_wait_cb sentcb, maneuver_wait_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_wait_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_wait_output **out,
  void **exdetail);

void	genom_maneuver_client_wait_init_input(
  struct genom_maneuver_wait_input *input);
void	genom_maneuver_client_wait_init_output(
  struct genom_maneuver_wait_output *output);
void	genom_maneuver_client_wait_fini_input(
  struct genom_maneuver_wait_input *input);
void	genom_maneuver_client_wait_fini_output(
  struct genom_maneuver_wait_output *output);

int	genom_maneuver_client_wait_json_scan(
  struct genom_maneuver_wait_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_wait_json_print(
  char **json, const struct genom_maneuver_wait_output *out);

/* stop */
typedef void (*maneuver_stop_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_stop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_stop_rqst(
  genom_client h,
  const struct genom_maneuver_stop_input *in,
  maneuver_stop_cb sentcb, maneuver_stop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_stop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_stop_output **out,
  void **exdetail);

void	genom_maneuver_client_stop_init_input(
  struct genom_maneuver_stop_input *input);
void	genom_maneuver_client_stop_init_output(
  struct genom_maneuver_stop_output *output);
void	genom_maneuver_client_stop_fini_input(
  struct genom_maneuver_stop_input *input);
void	genom_maneuver_client_stop_fini_output(
  struct genom_maneuver_stop_output *output);

int	genom_maneuver_client_stop_json_scan(
  struct genom_maneuver_stop_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_stop_json_print(
  char **json, const struct genom_maneuver_stop_output *out);

/* get_reference */
typedef void (*maneuver_get_reference_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_get_reference_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_get_reference_rqst(
  genom_client h,
  const struct genom_maneuver_get_reference_input *in,
  maneuver_get_reference_cb sentcb, maneuver_get_reference_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_get_reference_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_get_reference_output **out,
  void **exdetail);

void	genom_maneuver_client_get_reference_init_input(
  struct genom_maneuver_get_reference_input *input);
void	genom_maneuver_client_get_reference_init_output(
  struct genom_maneuver_get_reference_output *output);
void	genom_maneuver_client_get_reference_fini_input(
  struct genom_maneuver_get_reference_input *input);
void	genom_maneuver_client_get_reference_fini_output(
  struct genom_maneuver_get_reference_output *output);

int	genom_maneuver_client_get_reference_json_scan(
  struct genom_maneuver_get_reference_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_get_reference_json_print(
  char **json, const struct genom_maneuver_get_reference_output *out);

/* set_horizon */
typedef void (*maneuver_set_horizon_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_set_horizon_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_set_horizon_rqst(
  genom_client h,
  const struct genom_maneuver_set_horizon_input *in,
  maneuver_set_horizon_cb sentcb, maneuver_set_horizon_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_set_horizon_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_set_horizon_output **out,
  void **exdetail);

void	genom_maneuver_client_set_horizon_init_input(
  struct genom_maneuver_set_horizon_input *input);
void	genom_maneuver_client_set_horizon_init_output(
  struct genom_maneuver_set_horizon_output *output);
void	genom_maneuver_client_set_horizon_fini_input(
  struct genom_maneuver_set_horizon_input *input);
void	genom_maneuver_client_set_horizon_fini_output(
  struct genom_maneuver_set_horizon_output *output);

int	genom_maneuver_client_set_horizon_json_scan(
  struct genom_maneuver_set_horizon_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_set_horizon_json_print(
  char **json, const struct genom_maneuver_set_horizon_output *out);

/* log */
typedef void (*maneuver_log_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_log_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_log_rqst(
  genom_client h,
  const struct genom_maneuver_log_input *in,
  maneuver_log_cb sentcb, maneuver_log_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_log_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_log_output **out,
  void **exdetail);

void	genom_maneuver_client_log_init_input(
  struct genom_maneuver_log_input *input);
void	genom_maneuver_client_log_init_output(
  struct genom_maneuver_log_output *output);
void	genom_maneuver_client_log_fini_input(
  struct genom_maneuver_log_input *input);
void	genom_maneuver_client_log_fini_output(
  struct genom_maneuver_log_output *output);

int	genom_maneuver_client_log_json_scan(
  struct genom_maneuver_log_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_log_json_print(
  char **json, const struct genom_maneuver_log_output *out);

/* log_stop */
typedef void (*maneuver_log_stop_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_log_stop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_log_stop_rqst(
  genom_client h,
  const struct genom_maneuver_log_stop_input *in,
  maneuver_log_stop_cb sentcb, maneuver_log_stop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_log_stop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_log_stop_output **out,
  void **exdetail);

void	genom_maneuver_client_log_stop_init_input(
  struct genom_maneuver_log_stop_input *input);
void	genom_maneuver_client_log_stop_init_output(
  struct genom_maneuver_log_stop_output *output);
void	genom_maneuver_client_log_stop_fini_input(
  struct genom_maneuver_log_stop_input *input);
void	genom_maneuver_client_log_stop_fini_output(
  struct genom_maneuver_log_stop_output *output);

int	genom_maneuver_client_log_stop_json_scan(
  struct genom_maneuver_log_stop_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_log_stop_json_print(
  char **json, const struct genom_maneuver_log_stop_output *out);

/* log_info */
typedef void (*maneuver_log_info_cb)(
  genom_client h,
  int rqstid,
  int done,
  genom_event report,
  struct genom_maneuver_log_info_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_maneuver_client_log_info_rqst(
  genom_client h,
  const struct genom_maneuver_log_info_input *in,
  maneuver_log_info_cb sentcb, maneuver_log_info_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_maneuver_client_log_info_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_maneuver_log_info_output **out,
  void **exdetail);

void	genom_maneuver_client_log_info_init_input(
  struct genom_maneuver_log_info_input *input);
void	genom_maneuver_client_log_info_init_output(
  struct genom_maneuver_log_info_output *output);
void	genom_maneuver_client_log_info_fini_input(
  struct genom_maneuver_log_info_input *input);
void	genom_maneuver_client_log_info_fini_output(
  struct genom_maneuver_log_info_output *output);

int	genom_maneuver_client_log_info_json_scan(
  struct genom_maneuver_log_info_input *in,
  const char *json, char **endptr);
int	genom_maneuver_client_log_info_json_print(
  char **json, const struct genom_maneuver_log_info_output *out);



/* --- Ports --------------------------------------------------------------- */

/* genom_state */
#line 78 "/home/swasiela/openrobots/share/genom/templates/common/genom.gen"
genom_event genom_maneuver_client_genom_state_port(
  genom_client h,
  genom_state_component *data);

/* desired */
#line 31 "/home/swasiela/CAMP/src/simulation_genom/genom_custom/src/maneuver-genom3/maneuver.gen"
genom_event genom_maneuver_client_desired_port(
  genom_client h,
  or_rigid_body_state *data);

/* horizon */
#line 32 "/home/swasiela/CAMP/src/simulation_genom/genom_custom/src/maneuver-genom3/maneuver.gen"
genom_event genom_maneuver_client_horizon_port(
  genom_client h,
  or_rigid_body_trajectory *data);


void	genom_maneuver_client_genom_state_init_data(
  genom_state_component *data);
void	genom_maneuver_client_genom_state_fini_data(
  genom_state_component *data);
int	genom_maneuver_client_genom_state_json_print(char **json,
  const genom_state_component *data);

void	genom_maneuver_client_desired_init_data(
  or_rigid_body_state *data);
void	genom_maneuver_client_desired_fini_data(
  or_rigid_body_state *data);
int	genom_maneuver_client_desired_json_print(char **json,
  const or_rigid_body_state *data);

void	genom_maneuver_client_horizon_init_data(
  or_rigid_body_trajectory *data);
void	genom_maneuver_client_horizon_fini_data(
  or_rigid_body_trajectory *data);
int	genom_maneuver_client_horizon_json_print(char **json,
  const or_rigid_body_trajectory *data);




/* --- Data ---------------------------------------------------------------- */

extern const struct genom_client_info genom_maneuver_client_info;

extern const struct genom_service_info *
			genom_maneuver_client_abort_activity_info;
extern const struct genom_service_info *
			genom_maneuver_client_connect_port_info;
extern const struct genom_service_info *
			genom_maneuver_client_connect_service_info;
extern const struct genom_service_info *
			genom_maneuver_client_kill_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_bounds_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_velocity_limit_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_acceleration_limit_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_jerk_limit_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_snap_limit_info;
extern const struct genom_service_info *
			genom_maneuver_client_get_limits_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_state_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_current_state_info;
extern const struct genom_service_info *
			genom_maneuver_client_take_off_info;
extern const struct genom_service_info *
			genom_maneuver_client_goto_info;
extern const struct genom_service_info *
			genom_maneuver_client_waypoint_info;
extern const struct genom_service_info *
			genom_maneuver_client_velocity_info;
extern const struct genom_service_info *
			genom_maneuver_client_replay_info;
extern const struct genom_service_info *
			genom_maneuver_client_wait_info;
extern const struct genom_service_info *
			genom_maneuver_client_stop_info;
extern const struct genom_service_info *
			genom_maneuver_client_get_reference_info;
extern const struct genom_service_info *
			genom_maneuver_client_set_horizon_info;
extern const struct genom_service_info *
			genom_maneuver_client_log_info;
extern const struct genom_service_info *
			genom_maneuver_client_log_stop_info;
extern const struct genom_service_info *
			genom_maneuver_client_log_info_info;

extern const struct genom_port_info *
			genom_maneuver_client_genom_state_info;
extern const struct genom_port_info *
			genom_maneuver_client_desired_info;
extern const struct genom_port_info *
			genom_maneuver_client_horizon_info;

#ifdef __cplusplus
}
#endif

#endif /* H_MANEUVER_CLIENT */
