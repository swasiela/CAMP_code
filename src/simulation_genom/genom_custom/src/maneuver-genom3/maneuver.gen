/*/
 * Copyright (c) 2016-2021 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution and use  in source  and binary  forms,  with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 *                                      Anthony Mallet on Mon Aug 22 2016
 */
#pragma require "openrobots2-idl >= 2.1"

#include "or/pose/pose_estimator.gen"
#include "or/pose/rigid_body.gen"

component maneuver {
  version		"2.1";
  email			"openrobots@laas.fr";
  lang			"c";
  codels-require	"libkdtp >= 1.3";

  uses		or_pose_estimator;

  port in	or_pose_estimator::state state;
  port out	or_rigid_body::state desired;
  port out	or_rigid_body::trajectory horizon {
    doc	"Moving horizon of the current motion.";
    doc	"";
    doc	"See <<set_horizon>> to configure this port.";
  };

  exception e_nostate;
  exception e_limits;
  exception e_sys { short code; string<128> what; };

  native planner_s;
  native log_s;

  enum motion { idling, moving };

  ids {
    planner_s planner;		/* trajectory planner */
    planner_s vplanner;		/* velocity planner */

    or_rigid_body::state reference;

    struct trajectory_t {
      sequence<or_rigid_body::state> t;
      unsigned long i;
    } trajectory;

    /* horizon */
    unsigned long horizondt;	/* delta sample time */

    /* logging */
    log_s log;
  };

  const unsigned short control_period_ms = 5;

  function set_bounds(in double xmin, in double xmax,
                      in double ymin, in double ymax,
                      in double zmin, in double zmax,
                      in double yawmin, in double yawmax) {
    codel mv_set_bounds(inout planner,
                        in xmin, in xmax, in ymin, in ymax, in zmin, in zmax,
                        in yawmin, in yawmax);
  };
  function set_velocity_limit(in double v, in double w) {
    codel mv_set_velocity_limit(inout planner, inout vplanner, in v, in w);
    throw e_limits;
  };
  function set_acceleration_limit(in double a, in double dw) {
    codel mv_set_acceleration_limit(inout planner, inout vplanner, in a, in dw);
    throw e_limits;
  };
  function set_jerk_limit(in double j, in double ddw) {
    codel mv_set_jerk_limit(inout planner, inout vplanner, in j, in ddw);
    throw e_limits;
  };
  function set_snap_limit(in double s, in double dddw) {
    codel mv_set_snap_limit(inout planner, inout vplanner, in s, in dddw);
    throw e_limits;
  };

  function get_limits(out double xmin, out double xmax,
                      out double ymin, out double ymax,
                      out double zmin, out double zmax,
                      out double yawmin, out double yawmax,
                      out double v, out double w,
                      out double a, out double dw,
                      out double j, out double ddw,
                      out double s, out double dddw) {
    codel mv_get_limits(inout planner,
                        out xmin, out xmax,
                        out ymin, out ymax,
                        out zmin, out zmax,
                        out yawmin, out yawmax,
                        out v, out w,
                        out a, out dw,
                        out j, out ddw,
                        out s, out dddw);
  };


  /* --- planning ---------------------------------------------------------- */

  task plan {
    codel<start> mv_plan_start(out ::ids) yield ether;
    codel<stop> mv_plan_stop(inout ::ids) yield ether;
  };

  function set_state(in double x, in double y, in double z, in double yaw) {
    doc		"Set initial planning position";

    codel mv_set_state(in x, in y, in z, in yaw, out reference);
  };

  activity set_current_state() {
    doc		"Set initial planning position to current one";
    task	plan;

    codel<start> mv_current_state_read(in state, out reference)
      yield ether;

    throw e_nostate;
  };

  activity take_off(in double height, in double duration) {
    doc		"Vertical take-off from current state";
    task	plan;

    local sequence<or_rigid_body::state> path;

    validate mv_plan_cancel(inout trajectory, out reference);

    codel<start> mv_plan_take_off(in planner, in reference, in height,
                                  in duration, out path)
      yield exec;
    codel<exec> mv_plan_exec(in path, out reference, inout trajectory)
      yield wait;
    codel<wait> mv_plan_wait(in trajectory)
      yield pause::wait, ether;

    throw e_nostate, e_limits, e_sys;
    interrupt take_off, goto, waypoint, replay, stop;
  };

  activity goto(in double x, in double y, in double z, in double yaw,
                in double duration) {
    doc		"Reach a given position from current state";
    task	plan;

    local sequence<or_rigid_body::state> path;

    validate mv_plan_cancel(inout trajectory, out reference);

    codel<start> mv_plan_goto(in planner, in reference,
                              in x, in y, in z, in yaw, in duration, out path)
      yield exec;
    codel<exec> mv_plan_exec(in path, out reference, inout trajectory)
      yield wait;
    codel<wait> mv_plan_wait(in trajectory)
      yield pause::wait, ether;

    throw e_nostate, e_limits, e_sys;
    interrupt take_off, goto, waypoint, replay, stop;
  };

  activity waypoint(in double x, in double y, in double z, in double yaw,
                    in double vx, in double vy, in double vz, in double wz,
                    in double ax, in double ay, in double az,
                    in double duration) {
    doc		"Push a given position to reach after last one";
    task	plan;

    local sequence<or_rigid_body::state> path;

    codel<start> mv_plan_waypoint(in planner, in reference,
                                  in x, in y, in z, in yaw,
                                  in vx, in vy, in vz, in wz,
                                  in ax, in ay, in az,
                                  in duration, out path)
      yield exec;
    codel<exec, stop> mv_plan_exec(in path, out reference, inout trajectory)
      yield wait;
    codel<wait> mv_no_wait()
      yield ether;

    throw e_nostate, e_limits, e_sys;
    interrupt waypoint, stop;
  };

  function velocity(in double vx, in double vy, in double vz, in double wz,
                    in double ax, in double ay, in double az,
                    in double duration) {
    doc		"Reach a desired velocity within a given duration";

    local sequence<or_rigid_body::state> path;

    validate mv_plan_cancel(inout trajectory, out reference);

    codel mv_plan_velocity(in vplanner, in reference,
                           in vx, in vy, in vz, in wz,
                           in ax, in ay, in az,
                           in duration, out path);
    codel mv_push_path(in path, out reference, inout trajectory);

    throw e_limits, e_sys;
    interrupt take_off, goto, replay, stop;
  };

  activity replay(in string<128> filename = "maneuver.log": "Log file name")
  {
    doc "Replay a trajectory log file";
    task plan;

    local sequence<or_rigid_body::state> path;

    validate mv_plan_cancel(inout trajectory, out reference);

    codel<start> mv_replay_read(in planner, in filename, out path)
      yield exec;
    codel<exec> mv_plan_exec(in path, out reference, inout trajectory)
      yield wait;
    codel<wait> mv_plan_wait(in trajectory)
      yield pause::wait, ether;

    throw e_nostate, e_limits, e_sys;
    interrupt take_off, goto, waypoint, replay, stop;
  };

  activity wait() {
    doc		"Wait until last waypoint/goto point is reached";
    task	plan;

    codel<start, wait> mv_plan_wait(in trajectory)
      yield pause::wait, ether;
  };

  activity stop() {
    doc		"Cancel any motion and bring the velocity to zero";
    task	plan;

    local sequence<or_rigid_body::state> path;

    validate mv_plan_cancel(inout trajectory, out reference);

    codel<start> mv_plan_zero(in vplanner, in reference, out path)
      yield exec, ether;
    codel<exec> mv_plan_exec(in path, out reference, inout trajectory)
      yield wait;
    codel<wait> mv_plan_wait(in trajectory)
      yield pause::wait, ether;

    throw e_limits, e_sys;
    interrupt take_off, goto, waypoint, replay;
  };


  /* --- execution --------------------------------------------------------- */

  task exec {
    period control_period_ms ms;

    codel<start> mv_exec_start(out ::ids, out desired, out horizon)
      yield wait;
    codel<wait> mv_exec_wait(in trajectory, in reference, out desired)
      yield pause::wait, wait, path, servo;

    codel<path> mv_exec_path(inout trajectory,
                             in reference, out desired, inout log,
                             in horizondt, out horizon)
      yield pause::path, wait;
    codel<servo> mv_exec_servo(inout reference, out desired, inout log,
                               in horizondt, out horizon)
      yield pause::wait;

    codel<stop> mv_exec_stop() yield ether;
  };

  attribute get_reference(out reference);


  activity set_horizon(inout double horizon = : "Amount of time (s)",
                       inout unsigned long samples = : "Number of samples") {
    doc		"Set sampling rate and duration of horizon port";
    doc		"";
    doc		"This service activates the publication of the `horizon` port.";
    doc		"The input parameters are adapted to match the internal";
    doc		"sampling rate of trajectories, but are guaranteed to be at";
    doc		"least as big as requested. The actual values are returned as";
    doc		"output parameters";
    doc		"";
    doc		"Passing 0 as the number of samples uses the internal";
    doc		"sampling rate. Passing 0 for both duration and number of";
    doc		"samples disables publishing of the `horizon` port.";

    task	exec;

    validate mv_set_horizon(local inout horizon, inout samples, out horizondt);

    codel<start> mv_update_horizon(in samples, port out horizon)
      yield ether;
    throw e_sys;
  };


  /* --- logging ----------------------------------------------------------- */

  function log(in string<64> path = "/tmp/maneuver.log": "Log file name",
               in unsigned long decimation = 1: "Reduced logging frequency") {
    doc		"Log state";

    codel mv_log(in path, in decimation, inout log);

    throw e_sys;
  };

  function log_stop() {
    doc		"Stop logging";

    codel mv_log_stop(out log);
  };

  function log_info(out unsigned long miss = :"Missed log entries",
                    out unsigned long total = :"Total log entries") {
    doc		"Show missed log entries";

    codel mv_log_info(in log, out miss, out total);
  };
};
